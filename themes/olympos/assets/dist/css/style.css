/* Vendor */

/* Setup */

/* Eric Meyer's Reset CSS v2.0 - http://cssreset.com */

@import https://fonts.googleapis.com/css?family=Roboto:400,700;

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  margin: 0;
  padding: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* =======================================================================
## ++ Media Queries
========================================================================== */

/* 
    Used for media queries. 
    Add these mixins in your normal scss flow.
    
    Eg.
    .container{
        width:1024px;
        
        @include tablets{
            width:90%;
        }
    }
*/

/* =======================================================================
## ++ Unit transform
========================================================================== */

/*  
    Used for making containers have width in percentages. 
    Usage: define elemnt width in px and the width of parent elemnt in px. 
    eg. .block{width:cp(512px, 1024px)} this will result in .block{width:50%;}   
*/

/*  
    Used for making px values convert to rem values
    Usage: define font-size in px and it will convert to rems
    eg. font-size: rem(14px);
*/

/*! Typebase.less v0.1.0 | MIT License */

/* Setup */

html {
  /* Change default typefaces here */
  font-family: 'Roboto', sans-serif;
  font-size: 100%;
  -webkit-font-smoothing: antialiased;
}

/* Copy & Lists */

p {
  line-height: 1.5rem;
  margin-top: 1rem;
  margin-bottom: 0;
  font-size: 14px;
}

ul,
ol {
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
}

ul li,
ol li {
  line-height: 1.5rem;
}

ul ul,
ol ul,
ul ol,
ol ol {
  margin-top: 0;
  margin-bottom: 0;
}

blockquote {
  line-height: 1.5rem;
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
}

/* Headings */

h1,
h2,
h3,
h4,
h5,
h6 {
  /* Change heading typefaces here */
  font-family: sans-serif;
  margin-top: 1em;
  padding-top: 1em;
  margin-bottom: 0;
  line-height: 1.5rem;
  color: #333;
  font-weight: 700;
}

h1 {
  font-size: 1rem;
  line-height: 4.5rem;
  margin-top: 3rem;
}

h2 {
  font-size: 1rem;
  line-height: 3rem;
  margin-top: 3rem;
}

h3 {
  font-size: 1.414rem;
}

h4 {
  font-size: 0.707rem;
}

h5 {
  font-size: 0.4713333333333333rem;
}

h6 {
  font-size: 0.3535rem;
}

/* Tables */

table {
  margin-top: 1.5rem;
  border-spacing: 0px;
  border-collapse: collapse;
}

table td,
table th {
  padding: 0;
  line-height: 33px;
}

/* Code blocks */

code {
  vertical-align: bottom;
}

/* Leading paragraph text */

.lead {
  font-size: 1.414rem;
}

/* Hug the block above you */

.hug {
  margin-top: 0;
}

/* =======================================================================
## ++ Globals
========================================================================== */

html {
  font-size: 100%;
}

body {
  -webkit-font-smoothing: antialiased;
  background: cornsilk;
  color: #566b78;
}

.container {
  max-width: 40em;
  margin: 0 auto;
  margin-left: 2%;
}

* {
  box-sizing: border-box;
}

a {
  color: #e81c4f;
}

/*
|--------------------------------------------------------------------------
| Gallery
|--------------------------------------------------------------------------
*/

.gallery {
  padding: 20px 15px;
  background: #efefef;
  border: 1px solid #ccc;
  border-radius: 3px;
}

.gallery li {
  float: left;
  margin: 5px;
}

.gallery img,
.gallery a {
  display: block;
}

/*
|--------------------------------------------------------------------------
| Form
|--------------------------------------------------------------------------
*/

form {
  margin-top: 20px;
}

input,
textarea {
  width: 100%;
  padding: 15px;
  border: 1px solid #ccc;
  margin-bottom: 20px;
  font-size: 16px;
  color: #444;
  border-radius: 7px;
}

form label {
  display: block;
  margin-bottom: 10px;
}

form textarea {
  height: 200px;
}

form button {
  border: none;
  background: #E41C4E;
  padding: 15px 40px 14px;
  color: #fff;
  text-transform: uppercase;
  font-size: 16px;
  font-weight: 700;
  border-radius: 7px;
  transition: 7s;
}

form button:hover {
  color: #550000;
  background-color: tomato;
  cursor: pointer;
  transition: 1.5s;
}

/* =======================================================================
## ++ Cleafix
========================================================================== */

/* float clearing for IE6 */

* html .clearfix {
  height: 1%;
  overflow: visible;
}

/* float clearing for IE7 */

* + html .clearfix {
  min-height: 1%;
}

/* float clearing for everyone else */

.clearfix:after {
  clear: both;
  content: ".";
  display: block;
  height: 0;
  visibility: hidden;
  font-size: 0;
}

.clr {
  clear: both;
}

.clr {
  content: "test";
}

.flash {
  padding: 20px;
  margin: 10px 0;
  color: #fff;
  font-weight: bold;
  font-size: 1.2em;
  display: none;
  border-radius: 7px;
  text-align: center;
}

.flash.active {
  display: block;
}

.flash.error {
  background: red;
}

.flash.success {
  background: limegreen;
}

.red {
  color: red;
  font-weight: bold;
}

strong {
  font-weight: bold;
}

.main-header {
  background: #333;
}

.main-header h1 {
  color: #fff;
  font-size: 1.25rem;
  margin: 0;
  padding: 0;
  font-weight: 700;
  float: left;
}

.main-nav {
  float: right;
}

.main-nav li {
  float: left;
}

.main-nav a {
  display: inline-block;
  padding: 0 10px;
  text-decoration: none;
  text-transform: uppercase;
  font-size: 12px;
  font-weight: 700;
}

.main-nav a:hover {
  color: #fff;
}

.main-nav li.active a {
  text-decoration: underline;
}

h1,
h2 {
  margin: 0;
  padding: 0;
}

#actorList {
  margin-top: 0;
}

.main-footer {
  background: #efefef;
  padding: 20px 0;
  margin-top: 40px;
}

.main-footer h3 {
  margin: 0;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3R5bGUuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX3N1c3kuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9sYW5ndWFnZS9fc3VzeS5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L19zdS5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L3N1L191dGlsaXRpZXMuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9zdS9fc2V0dGluZ3Muc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9zdS9fdmFsaWRhdGlvbi5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L3N1L19ncmlkLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L19mbG9hdC5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L291dHB1dC9fc2hhcmVkLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L19zdXBwb3J0LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L3N1cHBvcnQvX3N1cHBvcnQuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fcHJlZml4LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L3N1cHBvcnQvX2JhY2tncm91bmQuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fYm94LXNpemluZy5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L291dHB1dC9zdXBwb3J0L19yZW0uc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fY2xlYXJmaXguc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19pbnNwZWN0LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fb3V0cHV0LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fZGlyZWN0aW9uLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fYmFja2dyb3VuZC5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L291dHB1dC9zaGFyZWQvX2NvbnRhaW5lci5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L291dHB1dC9zaGFyZWQvX21hcmdpbnMuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19wYWRkaW5nLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvb3V0cHV0L2Zsb2F0L19jb250YWluZXIuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvZmxvYXQvX3NwYW4uc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9vdXRwdXQvZmxvYXQvX2VuZC5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L291dHB1dC9mbG9hdC9faXNvbGF0ZS5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3NldHRpbmdzLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fdmFsaWRhdGlvbi5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2dyaWRzLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fYm94LXNpemluZy5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2NvbnRleHQuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19iYWNrZ3JvdW5kLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fY29udGFpbmVyLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fc3Bhbi5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2d1dHRlcnMuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19pc29sYXRlLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fZ2FsbGVyeS5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3Jvd3Muc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19tYXJnaW5zLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fcGFkZGluZy5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2JsZWVkLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fYnJlYWtwb2ludC1wbHVnaW4uc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX3N1LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvX3N1LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvc3UvX3V0aWxpdGllcy5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L3N1L19zZXR0aW5ncy5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9zdXN5L3N1L192YWxpZGF0aW9uLnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL3N1c3kvc3UvX2dyaWQuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX3Jlc2V0LnNjc3MiLCJDOi9sYXJhZ29uL3d3dy9vL3RoZW1lcy9vbHltcG9zL2Fzc2V0cy9zYXNzL19taXhpbnMuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX3ZhcmlhYmxlcy5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9fZm9udHMuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX2dsb2JhbHMuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX2hlYWRlci5zY3NzIiwiQzovbGFyYWdvbi93d3cvby90aGVtZXMvb2x5bXBvcy9hc3NldHMvc2Fzcy9faG9tZXBhZ2Uuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX3NpZGViYXIuc2NzcyIsIkM6L2xhcmFnb24vd3d3L28vdGhlbWVzL29seW1wb3MvYXNzZXRzL3Nhc3MvX2Zvb3Rlci5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIFZlbmRvciAqL1xyXG5AaW1wb3J0IFwic3VzeVwiO1xyXG5AaW1wb3J0IFwic3VcIjtcclxuLyogU2V0dXAgKi9cclxuQGltcG9ydCBcInJlc2V0XCI7XHJcbkBpbXBvcnQgXCJtaXhpbnNcIjtcclxuQGltcG9ydCBcInZhcmlhYmxlc1wiO1xyXG5AaW1wb3J0IFwiZm9udHNcIjtcclxuQGltcG9ydCBcImdsb2JhbHNcIjtcclxuQGltcG9ydCBcImhlYWRlclwiO1xyXG5AaW1wb3J0IFwiaG9tZXBhZ2VcIjtcclxuQGltcG9ydCBcInNpZGViYXJcIjtcclxuQGltcG9ydCBcImZvb3RlclwiO1xyXG5cclxuYm9keSB7XHJcbiAgLy9jb2xvcjogcmVkO1xyXG4gIC8vYmFja2dyb3VuZC1jb2xvcjpibHVlO1xyXG59XHJcbiIsIi8vIFN1c3lcclxuLy8gPT09PVxyXG5cclxuQGltcG9ydCAnc3VzeS9sYW5ndWFnZS9zdXN5JztcclxuIiwiLy8gU3VzeSBOZXh0IFN5bnRheFxyXG4vLyA9PT09PT09PT09PT09PT09XHJcblxyXG4kc3VzeS12ZXJzaW9uOiAyLjE7XHJcblxyXG5AaW1wb3J0IFwiLi4vc3VcIjtcclxuQGltcG9ydCBcIi4uL291dHB1dC9mbG9hdFwiO1xyXG5cclxuQGltcG9ydCBcInN1c3kvc2V0dGluZ3NcIjtcclxuQGltcG9ydCBcInN1c3kvdmFsaWRhdGlvblwiO1xyXG5AaW1wb3J0IFwic3VzeS9ncmlkc1wiO1xyXG5AaW1wb3J0IFwic3VzeS9ib3gtc2l6aW5nXCI7XHJcbkBpbXBvcnQgXCJzdXN5L2NvbnRleHRcIjtcclxuQGltcG9ydCBcInN1c3kvYmFja2dyb3VuZFwiO1xyXG5AaW1wb3J0IFwic3VzeS9jb250YWluZXJcIjtcclxuQGltcG9ydCBcInN1c3kvc3BhblwiO1xyXG5AaW1wb3J0IFwic3VzeS9ndXR0ZXJzXCI7XHJcbkBpbXBvcnQgXCJzdXN5L2lzb2xhdGVcIjtcclxuQGltcG9ydCBcInN1c3kvZ2FsbGVyeVwiO1xyXG5AaW1wb3J0IFwic3VzeS9yb3dzXCI7XHJcbkBpbXBvcnQgXCJzdXN5L21hcmdpbnNcIjtcclxuQGltcG9ydCBcInN1c3kvcGFkZGluZ1wiO1xyXG5AaW1wb3J0IFwic3VzeS9ibGVlZFwiO1xyXG5AaW1wb3J0IFwic3VzeS9icmVha3BvaW50LXBsdWdpblwiO1xyXG4iLCIvLyBTdVxyXG4vLyA9PVxyXG5cclxuQGltcG9ydCBcInN1L3V0aWxpdGllc1wiO1xyXG5AaW1wb3J0IFwic3Uvc2V0dGluZ3NcIjtcclxuQGltcG9ydCBcInN1L3ZhbGlkYXRpb25cIjtcclxuQGltcG9ydCBcInN1L2dyaWRcIjtcclxuIiwiLy8gTWFwIEZ1bmN0aW9uc1xyXG4vLyA9PT09PT09PT09PT09XHJcblxyXG5cclxuLy8gVHJ1bmNhdGUgTGlzdFxyXG4vLyAtLS0tLS0tLS0tLS0tXHJcbi8vIC0gUmV0dXJuIGEgbGlzdCwgdHJ1bmNhdGVkIHRvIGEgZ2l2ZW4gbGVuZ3RoXHJcbkBmdW5jdGlvbiBfc3VzeS10cnVuY2F0ZS1saXN0KFxyXG4gICRsaXN0LFxyXG4gICRsZW5ndGhcclxuKSB7XHJcbiAgJF9yZXR1cm46ICgpO1xyXG5cclxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbGlzdCkge1xyXG4gICAgJF9yZXR1cm46IGlmKCRpIDw9ICRsZW5ndGgsIGFwcGVuZCgkX3JldHVybiwgbnRoKCRsaXN0LCAkaSkpLCAkX3JldHVybik7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcblxyXG5cclxuLy8gRGVlcCBHZXRcclxuLy8gLS0tLS0tLS1cclxuLy8gLSBSZXR1cm4gYSB2YWx1ZSBkZWVwIGluIG5lc3RlZCBtYXBzXHJcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLWdldChcclxuICAkbWFwLFxyXG4gICRrZXlzLi4uXHJcbikge1xyXG4gICRfcmV0dXJuOiAkbWFwO1xyXG5cclxuICBAZWFjaCAka2V5IGluICRrZXlzIHtcclxuICAgIEBpZiB0eXBlLW9mKCRfcmV0dXJuKSA9PSBtYXAge1xyXG4gICAgICAkX3JldHVybjogbWFwLWdldCgkX3JldHVybiwgJGtleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcblxyXG5cclxuLy8gRGVlcCBTZXRcclxuLy8gLS0tLS0tLS1cclxuLy8gLSBTZXQgYSB2YWx1ZSBkZWVwIGluIG5lc3RlZCBtYXBzXHJcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLXNldChcclxuICAkbWFwLFxyXG4gICRrZXlzLXZhbHVlLi4uXHJcbikge1xyXG4gICRfdmFsdWU6IG50aCgka2V5cy12YWx1ZSwgLTEpO1xyXG4gICRfa2V5czogX3N1c3ktdHJ1bmNhdGUtbGlzdCgka2V5cy12YWx1ZSwgbGVuZ3RoKCRrZXlzLXZhbHVlKSAtIDEpO1xyXG4gICRfbGVuZ3RoOiBsZW5ndGgoJF9rZXlzKTtcclxuICAkX3JldHVybjogKCk7XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJF9sZW5ndGgge1xyXG4gICAgJF9uOiAwIC0gJGk7XHJcbiAgICAkX2xldmVsOiBfc3VzeS10cnVuY2F0ZS1saXN0KCRfa2V5cywgJF9sZW5ndGggKyAkX24pO1xyXG4gICAgJF9sZXZlbDogX3N1c3ktZGVlcC1nZXQoJG1hcCwgJF9sZXZlbC4uLik7XHJcbiAgICAkX21lcmdlOiBudGgoJF9rZXlzLCAkX24pO1xyXG4gICAgJF9tZXJnZTogKCRfbWVyZ2U6ICRfdmFsdWUpO1xyXG4gICAgJF9yZXR1cm46IGlmKCRfbGV2ZWwsIG1hcC1tZXJnZSgkX2xldmVsLCAkX21lcmdlKSwgJF9tZXJnZSk7XHJcbiAgICAkX3ZhbHVlOiAkX3JldHVybjtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcblxyXG4vLyBEZWVwIE1lcmdlXHJcbi8vIC0tLS0tLS0tLS1cclxuLy8gUmV0dXJuIDIgb2JqZWN0cyBvZiBhbnkgZGVwdGgsIG1lcmdlZFxyXG5AZnVuY3Rpb24gX3N1c3ktZGVlcC1tZXJnZShcclxuICAkbWFwMSxcclxuICAkbWFwMlxyXG4pIHtcclxuXHJcbiAgQGlmIHR5cGUtb2YoJG1hcDEpICE9IG1hcCBvciB0eXBlLW9mKCRtYXAyKSAhPSBtYXAge1xyXG4gICAgJG1hcDE6ICRtYXAyO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICRtYXAyIHtcclxuICAgICAgJF9uZXc6ICgka2V5OiBfc3VzeV9kZWVwLW1lcmdlKG1hcC1nZXQoJG1hcDEsICRrZXkpLCAkdmFsdWUpKTtcclxuICAgICAgJG1hcDE6IG1hcC1tZXJnZSgkbWFwMSwgJF9uZXcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkbWFwMTtcclxufVxyXG5cclxuXHJcbi8vIERlZXAgSGFzLUtleVxyXG4vLyAtLS0tLS0tLS0tLS1cclxuLy8gLSBSZXR1cm4gdHJ1ZSBpZiBhIGRlZXAga2V5IGV4aXN0c1xyXG5AZnVuY3Rpb24gX3N1c3ktZGVlcC1oYXMta2V5KFxyXG4gICRtYXAsXHJcbiAgJGtleXMuLi5cclxuKSB7XHJcbiAgJF9yZXR1cm46IG51bGw7XHJcbiAgJF9zdG9wOiBmYWxzZTtcclxuXHJcbiAgQGVhY2ggJGtleSBpbiAka2V5cyB7XHJcbiAgICBAaWYgbm90KCRfc3RvcCkge1xyXG4gICAgICAkX3JldHVybjogbWFwLWhhcy1rZXkoJG1hcCwgJGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgQGlmICRfcmV0dXJuIHtcclxuICAgICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICAkX3N0b3A6IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcbiIsIi8vIFNldHRpbmdzXHJcbi8vID09PT09PT09XHJcblxyXG4vLyBWZXJzaW9uXHJcbi8vIC0tLS0tLS1cclxuJHN1LXZlcnNpb246IDEuMTtcclxuXHJcblxyXG4vLyBEZWZhdWx0IFNldHRpbmdzXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS1cclxuLy8gUFJJVkFURTogVGhlIGJhc2ljIHNldHRpbmdzXHJcbiRzdXN5LWRlZmF1bHRzOiAoXHJcbiAgY29sdW1uczogNCxcclxuICBndXR0ZXJzOiAuMjUsXHJcbik7XHJcblxyXG5cclxuLy8gVXNlciBTZXR0aW5nc1xyXG4vLyAtLS0tLS0tLS0tLS0tXHJcbi8vIC0gRGVmaW5lIHRoZSAkc3VzeSB2YXJpYWJsZSB3aXRoIGEgbWFwIG9mIHlvdXIgb3duIHNldHRpbmdzLlxyXG4vLyAtIFNldCBFSVRIRVIgJGNvbHVtbi13aWR0aCBPUiAkY29udGFpbmVyXHJcbi8vIC0gVXNlICRjb2x1bW4td2lkdGggZm9yIHN0YXRpYyBsYXlvdXRzXHJcbiRzdXN5OiAoKSAhZGVmYXVsdDtcclxuXHJcblxyXG4vLyBTdXN5IERlZmF1bHRzXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gUFJJVkFURTogQWRkIGRlZmF1bHRzIHRvIFN1c3lcclxuQG1peGluIHN1c3ktZGVmYXVsdHMoXHJcbiAgJGRlZmF1bHRzXHJcbikge1xyXG4gICRzdXN5LWRlZmF1bHRzOiBtYXAtbWVyZ2UoJHN1c3ktZGVmYXVsdHMsICRkZWZhdWx0cykgIWdsb2JhbDtcclxufVxyXG5cclxuXHJcbi8vIFN1c3kgU2V0XHJcbi8vIC0tLS0tLS0tXHJcbi8vIENoYW5nZSBvbmUgc2V0dGluZ1xyXG4vLyAtICRrZXkgICA6IHNldHRpbmcgbmFtZVxyXG4vLyAtICR2YWx1ZSA6IHNldHRpbmcgdmFsdWVcclxuQG1peGluIHN1c3ktc2V0KFxyXG4gICRrZXktdmFsdWUuLi5cclxuKSB7XHJcbiAgJHN1c3k6IF9zdXN5LWRlZXAtc2V0KCRzdXN5LCAka2V5LXZhbHVlLi4uKSAhZ2xvYmFsO1xyXG59XHJcblxyXG5cclxuLy8gU3VzeSBHZXRcclxuLy8gLS0tLS0tLS1cclxuLy8gUmV0dXJuIG9uZSBzZXR0aW5nIGZyb20gYSBncmlkXHJcbi8vIC0gJGtleSAgICAgOiA8a2V5d29yZD5cclxuLy8gLSAkbGF5b3V0ICA6IDxzZXR0aW5ncz5cclxuQGZ1bmN0aW9uIHN1c3ktZ2V0KFxyXG4gICRrZXksXHJcbiAgJGxheW91dDogbWFwLW1lcmdlKCRzdXN5LWRlZmF1bHRzLCAkc3VzeSlcclxuKSB7XHJcbiAgJGxheW91dDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcclxuICAkX29wdGlvbnM6ICRsYXlvdXQgJHN1c3kgJHN1c3ktZGVmYXVsdHM7XHJcbiAgJF9icmVhazogZmFsc2U7XHJcbiAgJF9yZXR1cm46IG51bGw7XHJcblxyXG4gIEBlYWNoICRvcHQgaW4gJF9vcHRpb25zIHtcclxuICAgIEBpZiB0eXBlLW9mKCRvcHQpID09IG1hcCBhbmQgbm90KCRfYnJlYWspIHtcclxuICAgICAgJF9rZXlzZXQ6IF9zdXN5LWRlZXAtaGFzLWtleSgkb3B0LCAka2V5Li4uKTtcclxuICAgICAgQGlmICRfa2V5c2V0IHtcclxuICAgICAgICAkX3JldHVybjogX3N1c3ktZGVlcC1nZXQoJG9wdCwgJGtleS4uLik7XHJcbiAgICAgICAgJF9icmVhazogdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkX3JldHVybjtcclxufVxyXG4iLCIvLyBNYXRoIFZhbGlkYXRpb25cclxuLy8gPT09PT09PT09PT09PT09XHJcblxyXG5cclxuLy8gVmFsaWQgQ29sdW1uc1xyXG4vLyAtLS0tLS0tLS0tLS0tXHJcbi8vIENoZWNrIHRoYXQgYSBjb2x1bW4gc2V0dGluZyBpcyB2YWxpZC5cclxuQGZ1bmN0aW9uIHZhbGlkLWNvbHVtbnMoXHJcbiAgJGNvbHVtbnMsXHJcbiAgJHNpbGVudDogZmFsc2VcclxuKSB7XHJcbiAgJHR5cGU6IHR5cGUtb2YoJGNvbHVtbnMpO1xyXG4gICRyZXR1cm46IG51bGw7XHJcblxyXG4gIEBpZiAkdHlwZSA9PSBudW1iZXIgYW5kIHVuaXRsZXNzKCRjb2x1bW5zKSB7XHJcbiAgICAkcmV0dXJuOiAkY29sdW1ucztcclxuICB9IEBlbHNlIGlmICR0eXBlID09IGxpc3Qge1xyXG4gICAgJGZhaWw6IG51bGw7XHJcbiAgICBAZWFjaCAkY29sIGluICRjb2x1bW5zIHtcclxuICAgICAgQGlmIHR5cGUtb2YoJGNvbCkgPT0gbnVtYmVyIHtcclxuICAgICAgICAkZmFpbDogJGZhaWwgb3IgaWYodW5pdGxlc3MoJGNvbCksIG51bGwsIHRydWUpO1xyXG4gICAgICB9IEBlbHNlIHtcclxuICAgICAgICAkZmFpbDogdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHJldHVybjogaWYoJGZhaWwsICRyZXR1cm4sICRjb2x1bW5zKTtcclxuICB9XHJcblxyXG4gIEBpZiAkcmV0dXJuICE9ICRjb2x1bW5zIGFuZCBub3QoJHNpbGVudCkge1xyXG4gICAgJHJldHVybjogbnVsbDtcclxuICAgICR3YXJuOiAnJGNvbHVtbnMgbXVzdCBiZSBhIHVuaXRsZXNzIG51bWJlciBvciBsaXN0IG9mIHVuaXRsZXNzIG51bWJlcnMuJztcclxuICAgIEB3YXJuICR3YXJuICsgJyBDdXJyZW50IHZhbHVlIFsjeyR0eXBlfV06ICN7JGNvbHVtbnN9JztcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHJldHVybjtcclxufVxyXG5cclxuXHJcbi8vIFZhbGlkIEd1dHRlcnNcclxuLy8gLS0tLS0tLS0tLS0tLVxyXG4vLyBDaGVjayB0aGF0IGEgZ3V0dGVyIHNldHRpbmcgaXMgdmFsaWQuXHJcbkBmdW5jdGlvbiB2YWxpZC1ndXR0ZXJzKFxyXG4gICRndXR0ZXJzLFxyXG4gICRzaWxlbnQ6IGZhbHNlXHJcbikge1xyXG4gICR0eXBlOiB0eXBlLW9mKCRndXR0ZXJzKTtcclxuICAkcmV0dXJuOiBudWxsO1xyXG5cclxuICBAaWYgJHR5cGUgPT0gbnVtYmVyIGFuZCB1bml0bGVzcygkZ3V0dGVycykge1xyXG4gICAgJHJldHVybjogJGd1dHRlcnM7XHJcbiAgfSBAZWxzZSBpZiBub3QoJHNpbGVudCkge1xyXG4gICAgJHdhcm46ICckZ3V0dGVycyBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyLic7XHJcbiAgICBAd2FybiAkd2FybiArICcgQ3VycmVudCB2YWx1ZSBbI3skdHlwZX1dOiAjeyRndXR0ZXJzfSc7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRyZXR1cm47XHJcbn1cclxuIiwiLy8gQ29sdW1uIG1hdGhcclxuLy8gPT09PT09PT09PT1cclxuXHJcblxyXG4vLyBJcyBTeW1tZXRyaWNhbFxyXG4vLyAtLS0tLS0tLS0tLS0tLVxyXG4vLyBSZXR1cm5zIHRydWUgaWYgYSBncmlkIGlzIHN5bW1ldHJpY2FsLlxyXG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XHJcbkBmdW5jdGlvbiBpcy1zeW1tZXRyaWNhbChcclxuICAkY29sdW1uczogc3VzeS1nZXQoY29sdW1ucylcclxuKSB7XHJcbiAgJGNvbHVtbnM6IHZhbGlkLWNvbHVtbnMoJGNvbHVtbnMpO1xyXG4gIEByZXR1cm4gaWYodHlwZS1vZigkY29sdW1ucykgPT0gbnVtYmVyLCAkY29sdW1ucywgbnVsbCk7XHJcbn1cclxuXHJcblxyXG4vLyBTdXN5IENvdW50XHJcbi8vIC0tLS0tLS0tLS1cclxuLy8gRmluZCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gYSBnaXZlbiBsYXlvdXRcclxuLy8gLSBbJGNvbHVtbnNdICAgOiA8bnVtYmVyPiB8IDxsaXN0PlxyXG5AZnVuY3Rpb24gc3VzeS1jb3VudChcclxuICAkY29sdW1uczogc3VzeS1nZXQoY29sdW1ucylcclxuKSB7XHJcbiAgJGNvbHVtbnM6IHZhbGlkLWNvbHVtbnMoJGNvbHVtbnMpO1xyXG4gIEByZXR1cm4gaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpIG9yIGxlbmd0aCgkY29sdW1ucyk7XHJcbn1cclxuXHJcblxyXG4vLyBTdXN5IFN1bVxyXG4vLyAtLS0tLS0tLVxyXG4vLyBGaW5kIHRoZSB0b3RhbCBzdW0gb2YgY29sdW1uLXVuaXRzIGluIGEgbGF5b3V0XHJcbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cclxuLy8gLSBbJGd1dHRlcnNdICAgOiA8cmF0aW8+XHJcbi8vIC0gWyRzcHJlYWRdICAgIDogZmFsc2UvbmFycm93IHwgd2lkZSB8IHdpZGVyXHJcbkBmdW5jdGlvbiBzdXN5LXN1bShcclxuICAkY29sdW1ucyAgOiBzdXN5LWdldChjb2x1bW5zKSxcclxuICAkZ3V0dGVycyAgOiBzdXN5LWdldChndXR0ZXJzKSxcclxuICAkc3ByZWFkICAgOiBmYWxzZVxyXG4pIHtcclxuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XHJcbiAgJGd1dHRlcnM6IHZhbGlkLWd1dHRlcnMoJGd1dHRlcnMpO1xyXG5cclxuICAkc3ByZWFkOiBpZigkc3ByZWFkID09IHdpZGUsIDAsIGlmKCRzcHJlYWQgPT0gd2lkZXIsIDEsIC0xKSk7XHJcbiAgJGd1dHRlci1zdW06IChzdXN5LWNvdW50KCRjb2x1bW5zKSArICRzcHJlYWQpICogJGd1dHRlcnM7XHJcbiAgJGNvbHVtbi1zdW06IGlzLXN5bW1ldHJpY2FsKCRjb2x1bW5zKTtcclxuXHJcbiAgQGlmIG5vdCgkY29sdW1uLXN1bSkge1xyXG4gICAgQGVhY2ggJGNvbHVtbiBpbiAkY29sdW1ucyB7XHJcbiAgICAgICRjb2x1bW4tc3VtOiAoJGNvbHVtbi1zdW0gb3IgMCkgKyAkY29sdW1uO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkY29sdW1uLXN1bSArICRndXR0ZXItc3VtO1xyXG59XHJcblxyXG5cclxuLy8gU3VzeSBTbGljZVxyXG4vLyAtLS0tLS0tLS0tXHJcbi8vIFJldHVybiBhIHN1YnNldCBvZiBjb2x1bW5zIGF0IGEgZ2l2ZW4gbG9jYXRpb24uXHJcbi8vIC0gJHNwYW4gICAgICAgIDogPG51bWJlcj5cclxuLy8gLSAkbG9jYXRpb24gICAgOiA8bnVtYmVyPlxyXG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XHJcbkBmdW5jdGlvbiBzdXN5LXNsaWNlKFxyXG4gICRzcGFuLFxyXG4gICRsb2NhdGlvbixcclxuICAkY29sdW1uczogc3VzeS1nZXQoY29sdW1ucylcclxuKSB7XHJcbiAgJGNvbHVtbnM6IHZhbGlkLWNvbHVtbnMoJGNvbHVtbnMpO1xyXG4gICRzdWItY29sdW1uczogJHNwYW47XHJcblxyXG4gIEBpZiBub3QoaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpKSB7XHJcbiAgICAkbG9jYXRpb246ICRsb2NhdGlvbiBvciAxO1xyXG4gICAgJHN1Yi1jb2x1bW5zOiAoKTtcclxuICAgIEBmb3IgJGkgZnJvbSAkbG9jYXRpb24gdG8gKCRsb2NhdGlvbiArICRzcGFuKSB7XHJcbiAgICAgICRzdWItY29sdW1uczogYXBwZW5kKCRzdWItY29sdW1ucywgbnRoKCRjb2x1bW5zLCAkaSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkc3ViLWNvbHVtbnM7XHJcbn1cclxuXHJcblxyXG4vLyBTdXN5XHJcbi8vIC0tLS1cclxuLy8gRmluZCB0aGUgc3VtIG9mIGEgY29sdW1uLXNwYW4uXHJcbi8vIC0gJHNwYW4gICAgICAgIDogPG51bWJlcj5cclxuLy8gLSAkbG9jYXRpb24gICAgOiA8bnVtYmVyPlxyXG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XHJcbi8vIC0gWyRndXR0ZXJzXSAgIDogPHJhdGlvPlxyXG4vLyAtIFskc3ByZWFkXSAgICA6IGZhbHNlL25hcnJvdyB8IHdpZGUgfCB3aWRlclxyXG5AZnVuY3Rpb24gc3VzeShcclxuICAkc3BhbixcclxuICAkbG9jYXRpb24gICAgIDogZmFsc2UsXHJcbiAgJGNvbHVtbnMgICAgICA6IHN1c3ktZ2V0KGNvbHVtbnMpLFxyXG4gICRndXR0ZXJzICAgICAgOiBzdXN5LWdldChndXR0ZXJzKSxcclxuICAkc3ByZWFkICAgICAgIDogZmFsc2VcclxuKSB7XHJcbiAgJGNvbHVtbnM6IHZhbGlkLWNvbHVtbnMoJGNvbHVtbnMpO1xyXG4gICRndXR0ZXJzOiB2YWxpZC1ndXR0ZXJzKCRndXR0ZXJzKTtcclxuICAkc3Bhbjogc3VzeS1zbGljZSgkc3BhbiwgJGxvY2F0aW9uLCAkY29sdW1ucyk7XHJcblxyXG4gIEByZXR1cm4gc3VzeS1zdW0oJHNwYW4sICRndXR0ZXJzLCAkc3ByZWFkKTtcclxufVxyXG4iLCIvLyBGbG9hdCBBUElcclxuLy8gPT09PT09PT09XHJcblxyXG5AaW1wb3J0IFwic2hhcmVkXCI7XHJcblxyXG5AaW1wb3J0IFwiZmxvYXQvY29udGFpbmVyXCI7XHJcbkBpbXBvcnQgXCJmbG9hdC9zcGFuXCI7XHJcbkBpbXBvcnQgXCJmbG9hdC9lbmRcIjtcclxuQGltcG9ydCBcImZsb2F0L2lzb2xhdGVcIjtcclxuIiwiLy8gU2hhcmVkIEFQSVxyXG4vLyA9PT09PT09PT09XHJcblxyXG5AaW1wb3J0IFwic3VwcG9ydFwiO1xyXG5cclxuQGltcG9ydCBcInNoYXJlZC9pbnNwZWN0XCI7XHJcbkBpbXBvcnQgXCJzaGFyZWQvb3V0cHV0XCI7XHJcbkBpbXBvcnQgXCJzaGFyZWQvZGlyZWN0aW9uXCI7XHJcbkBpbXBvcnQgXCJzaGFyZWQvYmFja2dyb3VuZFwiO1xyXG5AaW1wb3J0IFwic2hhcmVkL2NvbnRhaW5lclwiO1xyXG5AaW1wb3J0IFwic2hhcmVkL21hcmdpbnNcIjtcclxuQGltcG9ydCBcInNoYXJlZC9wYWRkaW5nXCI7XHJcblxyXG5cclxuXHJcbiIsIi8vIFN1c3kgQnJvd3NlciBTdXBwb3J0XHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcblxyXG5AaW1wb3J0IFwic3VwcG9ydC9zdXBwb3J0XCI7XHJcbkBpbXBvcnQgXCJzdXBwb3J0L3ByZWZpeFwiO1xyXG5AaW1wb3J0IFwic3VwcG9ydC9iYWNrZ3JvdW5kXCI7XHJcbkBpbXBvcnQgXCJzdXBwb3J0L2JveC1zaXppbmdcIjtcclxuQGltcG9ydCBcInN1cHBvcnQvcmVtXCI7XHJcbkBpbXBvcnQgXCJzdXBwb3J0L2NsZWFyZml4XCI7XHJcbiIsIi8vIEJyb3dzZXIgU3VwcG9ydFxyXG4vLyA9PT09PT09PT09PT09PT1cclxuXHJcbi8vIFN1c3kgU3VwcG9ydCBEZWZhdWx0c1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQGluY2x1ZGUgc3VzeS1kZWZhdWx0cygoXHJcbiAgdXNlLWN1c3RvbTogKFxyXG4gICAgY2xlYXJmaXg6IGZhbHNlLFxyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdHJ1ZSxcclxuICAgIGJhY2tncm91bmQtb3B0aW9uczogZmFsc2UsXHJcbiAgICBicmVha3BvaW50OiB0cnVlLFxyXG4gICAgYm94LXNpemluZzogdHJ1ZSxcclxuICAgIHJlbTogdHJ1ZSxcclxuICApLFxyXG4pKTtcclxuXHJcblxyXG4vLyBTdXN5IFN1cHBvcnQgW21peGluXVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBTZW5kIHByb3BlcnR5LXZhbHVlIHBhaXJzIHRvIHRoZSBwcm9wZXIgc3VwcG9ydCBtb2R1bGVzLlxyXG4vLyAtICRwcm9wICA6IDxjc3MgcHJvcGVydHk+XHJcbi8vIC0gJHZhbCAgIDogPGNzcyB2YWx1ZT5cclxuQG1peGluIHN1c3ktc3VwcG9ydChcclxuICAkcHJvcCxcclxuICAkdmFsXHJcbikge1xyXG4gIC8vIEJhY2tncm91bmQgU3VwcG9ydFxyXG4gIEBpZiAkcHJvcCA9PSBiYWNrZ3JvdW5kLWltYWdlIHtcclxuICAgIEBpbmNsdWRlIHN1c3ktYmFja2dyb3VuZC1pbWFnZSgkdmFsKTtcclxuICB9IEBlbHNlIGlmICRwcm9wID09IGJhY2tncm91bmQtc2l6ZSB7XHJcbiAgICBAaW5jbHVkZSBzdXN5LWJhY2tncm91bmQtc2l6ZSgkdmFsKTtcclxuICB9IEBlbHNlIGlmICRwcm9wID09IGJhY2tncm91bmQtb3JpZ2luIHtcclxuICAgIEBpbmNsdWRlIHN1c3ktYmFja2dyb3VuZC1vcmlnaW4oJHZhbCk7XHJcbiAgfSBAZWxzZSBpZiAkcHJvcCA9PSBiYWNrZ3JvdW5kLWNsaXAge1xyXG4gICAgQGluY2x1ZGUgc3VzeS1iYWNrZ3JvdW5kLWNsaXAoJHZhbCk7XHJcbiAgfVxyXG5cclxuICAvLyBCb3gtU2l6aW5nIFN1cHBvcnRcclxuICBAZWxzZSBpZiAkcHJvcCA9PSBib3gtc2l6aW5nIHtcclxuICAgIEBpbmNsdWRlIHN1c3ktYm94LXNpemluZygkdmFsKTtcclxuICB9XHJcblxyXG4gIC8vIFJlbSBTdXBwb3J0XHJcbiAgQGVsc2Uge1xyXG4gICAgQGluY2x1ZGUgc3VzeS1yZW0oJHByb3AsICR2YWwpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbi8vIFN1c3kgU3VwcG9ydCBbZnVuY3Rpb25dXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIENoZWNrIGZvciBzdXBwb3J0IG9mIGEgZmVhdHVyZS5cclxuLy8gLSAkZmVhdHVyZSAgICAgICA6IDxzdHJpbmc+XHJcbi8vICAgICAgICAgICAgICAgICAgICAtIGUuZyBcInJlbVwiIG9yIFwiYm94LXNpemluZ1wiXHJcbi8vIC0gJHJlcXVpcmVtZW50cyAgOiA8bWFwPlxyXG4vLyAgICAgICAgICAgICAgICAgICAgLSBlLmcgKHZhcmlhYmxlOiByZW0td2l0aC1weC1mYWxsYmFjaywgbWl4aW46IHJlbSlcclxuLy8gLSAkd2FybiAgICAgICAgICA6IDxib29sPlxyXG5AZnVuY3Rpb24gc3VzeS1zdXBwb3J0KFxyXG4gICRmZWF0dXJlLFxyXG4gICRyZXF1aXJlbWVudHM6ICgpLFxyXG4gICR3YXJuOiB0cnVlXHJcbikge1xyXG4gICRfc3VwcG9ydDogc3VzeS1nZXQodXNlLWN1c3RvbSAkZmVhdHVyZSk7XHJcblxyXG4gIEBpZiAkX3N1cHBvcnQge1xyXG4gICAgJF9mYWlsOiBmYWxzZTtcclxuXHJcbiAgICBAZWFjaCAkX3R5cGUsICRfcmVxIGluICRyZXF1aXJlbWVudHMge1xyXG4gICAgICBAZWFjaCAkX2kgaW4gJF9yZXEge1xyXG4gICAgICAgICRfcGFzczogY2FsbCgjeyRfdHlwZX0tZXhpc3RzLCAkX2kpO1xyXG5cclxuICAgICAgICBAaWYgbm90KCRfcGFzcykge1xyXG4gICAgICAgICAgJF9mYWlsOiB0cnVlO1xyXG4gICAgICAgICAgQGlmICR3YXJuIHtcclxuICAgICAgICAgICAgQHdhcm4gXCJZb3UgcmVxdWVzdGVkIGN1c3RvbSBzdXBwb3J0IG9mICN7JGZlYXR1cmV9LCBidXQgdGhlICN7JF9pfSAjeyRfdHlwZX0gaXMgbm90IGF2YWlsYWJsZS5cIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkX3N1cHBvcnQ6IGlmKCRfZmFpbCwgZmFsc2UsICRfc3VwcG9ydCk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfc3VwcG9ydDtcclxufVxyXG4iLCIvLyBTdXN5IFByZWZpeFxyXG4vLyA9PT09PT09PT09PVxyXG5cclxuLy8gUHJlZml4XHJcbi8vIC0tLS0tLVxyXG4vLyBPdXRwdXQgc2ltcGxlIHByZWZpeGVkIHByb3BlcnRpZXMuXHJcbi8vIC0gJHByb3AgICAgICA6IDxjc3MgcHJvcGVydHk+XHJcbi8vIC0gJHZhbCAgICAgICA6IDxjc3MgdmFsdWU+XHJcbi8vIC0gWyRwcmVmaXhdICA6IDxicm93c2VyIHByZWZpeCBsaXN0PlxyXG5AbWl4aW4gc3VzeS1wcmVmaXgoXHJcbiAgJHByb3AsXHJcbiAgJHZhbCxcclxuICAkcHJlZml4OiBvZmZpY2lhbFxyXG4pIHtcclxuICBAZWFjaCAkZml4IGluICRwcmVmaXgge1xyXG4gICAgJGZpeDogaWYoJGZpeCA9PSBvZmZpY2lhbCBvciBub3QoJGZpeCksICRwcm9wLCAnLSN7JGZpeH0tI3skcHJvcH0nKTtcclxuICAgIEBpbmNsdWRlIHN1c3ktcmVtKCRmaXgsICR2YWwpO1xyXG4gIH1cclxufVxyXG4iLCIvLyBCYWNrZ3JvdW5kIFByb3BlcnRpZXNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBTdXN5IEJhY2tncm91bmQgSW1hZ2VcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBwcm92aWRlIGEgc2ltcGxlIGZhbGxiYWNrLlxyXG4vLyAtICRpbWFnZTogPGJhY2tncm91bmQtaW1hZ2U+XHJcbkBtaXhpbiBzdXN5LWJhY2tncm91bmQtaW1hZ2UoXHJcbiAgJGltYWdlXHJcbikge1xyXG4gIEBpZiBzdXN5LXN1cHBvcnQoYmFja2dyb3VuZC1pbWFnZSwgKG1peGluOiBiYWNrZ3JvdW5kLWltYWdlKSwgJHdhcm46IGZhbHNlKSB7XHJcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWltYWdlKCRpbWFnZS4uLik7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAkaW1hZ2U7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBTdXN5IEJhY2tncm91bmQgU2l6ZVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXHJcbi8vIC0gJGltYWdlOiA8YmFja2dyb3VuZC1zaXplPlxyXG5AbWl4aW4gc3VzeS1iYWNrZ3JvdW5kLXNpemUoXHJcbiAgJHNpemVcclxuKSB7XHJcbiAgQGlmIHN1c3ktc3VwcG9ydChiYWNrZ3JvdW5kLW9wdGlvbnMsIChtaXhpbjogYmFja2dyb3VuZC1zaXplKSkge1xyXG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZC1zaXplKCRzaXplKTtcclxuICB9IEBlbHNlIHtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogJHNpemU7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBTdXN5IEJhY2tncm91bmQgT3JpZ2luXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXHJcbi8vIC0gJGltYWdlOiA8YmFja2dyb3VuZC1vcmlnaW4+XHJcbkBtaXhpbiBzdXN5LWJhY2tncm91bmQtb3JpZ2luKFxyXG4gICRvcmlnaW5cclxuKSB7XHJcbiAgQGlmIHN1c3ktc3VwcG9ydChiYWNrZ3JvdW5kLW9wdGlvbnMsIChtaXhpbjogYmFja2dyb3VuZC1vcmlnaW4pKSB7XHJcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLW9yaWdpbigkb3JpZ2luKTtcclxuICB9IEBlbHNlIHtcclxuICAgIGJhY2tncm91bmQtb3JpZ2luOiAkb3JpZ2luO1xyXG4gIH1cclxufVxyXG5cclxuLy8gU3VzeSBCYWNrZ3JvdW5kIENsaXBcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXHJcbi8vIC0gJGltYWdlOiA8YmFja2dyb3VuZC1jbGlwPlxyXG5AbWl4aW4gc3VzeS1iYWNrZ3JvdW5kLWNsaXAoXHJcbiAgJGNsaXBcclxuKSB7XHJcbiAgQGlmIHN1c3ktc3VwcG9ydChiYWNrZ3JvdW5kLW9wdGlvbnMsIChtaXhpbjogYmFja2dyb3VuZC1jbGlwKSkge1xyXG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZC1jbGlwKCRjbGlwKTtcclxuICB9IEBlbHNlIHtcclxuICAgIGJhY2tncm91bmQtY2xpcDogJGNsaXA7XHJcbiAgfVxyXG59XHJcbiIsIi8vIEJveCBTaXppbmdcclxuLy8gPT09PT09PT09PVxyXG5cclxuLy8gQm94IFNpemluZ1xyXG4vLyAtLS0tLS0tLS0tXHJcbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBwcm92aWRlIGEgc2ltcGxlIGZhbGxiYWNrLlxyXG4vLyAtICRtb2RlbDogPGJveC1zaXppbmc+XHJcbkBtaXhpbiBzdXN5LWJveC1zaXppbmcoXHJcbiAgJG1vZGVsOiBjb250ZW50LWJveFxyXG4pIHtcclxuICBAaWYgJG1vZGVsIHtcclxuICAgIEBpZiBzdXN5LXN1cHBvcnQoYm94LXNpemluZywgKG1peGluOiBib3gtc2l6aW5nKSwgJHdhcm46IGZhbHNlKSB7XHJcbiAgICAgIEBpbmNsdWRlIGJveC1zaXppbmcoJG1vZGVsKTtcclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICAkcHJlZml4OiAobW96LCB3ZWJraXQsIG9mZmljaWFsKTtcclxuICAgICAgQGluY2x1ZGUgc3VzeS1wcmVmaXgoYm94LXNpemluZywgJG1vZGVsLCAkcHJlZml4KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gcmVtIFN1cHBvcnRcclxuLy8gPT09PT09PT09PT1cclxuXHJcbi8vIHJlbVxyXG4vLyAtLS1cclxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIG91dHB1dCBkaXJlY3RseS5cclxuLy8gLSAkcHJvcCAgOiA8Y3NzIHByb3BlcnR5PlxyXG4vLyAtICR2YWwgICA6IDxjc3MgdmFsdWU+XHJcbkBtaXhpbiBzdXN5LXJlbShcclxuICAkcHJvcCxcclxuICAkdmFsXHJcbikge1xyXG4gICRfcmVxczogKFxyXG4gICAgdmFyaWFibGU6IHJoeXRobS11bml0IHJlbS13aXRoLXB4LWZhbGxiYWNrLFxyXG4gICAgbWl4aW46IHJlbSxcclxuICApO1xyXG4gIEBpZiBzdXN5LXN1cHBvcnQocmVtLCAkX3JlcXMsICR3YXJuOiBmYWxzZSkgYW5kICRyaHl0aG0tdW5pdCA9PSByZW0ge1xyXG4gICAgQGluY2x1ZGUgcmVtKCRwcm9wLCAkdmFsKTtcclxuICB9IEBlbHNlIHtcclxuICAgICN7JHByb3B9OiAkdmFsO1xyXG4gIH1cclxufVxyXG4iLCIvLyBTdXN5IEZhbGxiYWNrIENsZWFyZml4XHJcbi8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblxyXG4vLyBDbGVhcmZpeFxyXG4vLyAtLS0tLS0tLVxyXG4vLyBDaGVjayBmb3IgYW4gZXhpc3Rpbmcgc3VwcG9ydCBtaXhpbiwgb3IgcHJvdmlkZSBhIHNpbXBsZSBmYWxsYmFjay5cclxuQG1peGluIHN1c3ktY2xlYXJmaXgge1xyXG4gIEBpZiBzdXN5LXN1cHBvcnQoY2xlYXJmaXgsIChtaXhpbjogY2xlYXJmaXgpKSB7XHJcbiAgICBAaW5jbHVkZSBjbGVhcmZpeDtcclxuICB9IEBlbHNlIHtcclxuICAgICY6YWZ0ZXIge1xyXG4gICAgICBjb250ZW50OiBcIiBcIjtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIGNsZWFyOiBib3RoO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLyBEZWJ1Z2dpbmdcclxuLy8gPT09PT09PT09XHJcblxyXG4vLyBTdXN5IEluc3BlY3RcclxuLy8gLS0tLS0tLS0tLS0tXHJcbi8vIE91dHB1dCBhcmd1bWVudHMgcGFzc2VkIHRvIGEgaW5zcGVjdC5cclxuLy8gLSAkbWl4aW4gIDogPHN1c3kgbWl4aW4+XHJcbi8vIC0gJGluc3BlYyAgIDogPG1peGluIGFyZ3VtZW50cz5cclxuXHJcbkBtaXhpbiBzdXN5LWluc3BlY3QoJG1peGluLCAkaW5zcGVjdC4uLikge1xyXG4gICRzaG93OiBmYWxzZTtcclxuXHJcbiAgQGVhY2ggJGl0ZW0gaW4gJGluc3BlY3Qge1xyXG4gICAgQGlmIGluZGV4KCRpdGVtLCBpbnNwZWN0KSB7XHJcbiAgICAgICRzaG93OiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGlmICRzaG93IG9yIHN1c3ktZ2V0KGRlYnVnIGluc3BlY3QpIHtcclxuICAgIC1zdXN5LSN7JG1peGlufTogaW5zcGVjdCgkaW5zcGVjdCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIE91dHB1dFxyXG4vLyA9PT09PT1cclxuXHJcbi8vIE91dHB1dFxyXG4vLyAtLS0tLS1cclxuLy8gT3V0cHV0IENTUyB3aXRoIHByb3BlciBicm93c2VyIHN1cHBvcnQuXHJcbi8vIC0gJHN0eWxlcyAgOiA8bWFwIG9mIGNzcyBwcm9wZXJ0eS12YWx1ZSBwYWlycz5cclxuQG1peGluIG91dHB1dChcclxuICAkc3R5bGVzXHJcbikge1xyXG4gIEBlYWNoICRwcm9wLCAkdmFsIGluICRzdHlsZXMge1xyXG4gICAgQGluY2x1ZGUgc3VzeS1zdXBwb3J0KCRwcm9wLCAkdmFsKTtcclxuICB9XHJcbn1cclxuIiwiLy8gRGlyZWN0aW9uIEhlbHBlcnNcclxuLy8gPT09PT09PT09PT09PT09PT1cclxuXHJcbi8vIFN1c3kgRmxvdyBEZWZhdWx0c1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLSBQUklWQVRFXHJcbkBpbmNsdWRlIHN1c3ktZGVmYXVsdHMoKFxyXG4gIGZsb3c6IGx0cixcclxuKSk7XHJcblxyXG4vLyBHZXQgRGlyZWN0aW9uXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gUmV0dXJuIHRoZSAnZnJvbScgb3IgJ3RvJyBkaXJlY3Rpb24gb2YgYSBsdHIgb3IgcnRsIGZsb3cuXHJcbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcclxuLy8gLSBbJGtleV0gICA6IGZyb20gfCB0b1xyXG5AZnVuY3Rpb24gZ2V0LWRpcmVjdGlvbihcclxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdyksXHJcbiAgJGtleTogZnJvbVxyXG4pIHtcclxuICAkcmV0dXJuOiBpZigkZmxvdyA9PSBydGwsIChmcm9tOiByaWdodCwgdG86IGxlZnQpLCAoZnJvbTogbGVmdCwgdG86IHJpZ2h0KSk7XHJcbiAgQHJldHVybiBtYXAtZ2V0KCRyZXR1cm4sICRrZXkpO1xyXG59XHJcblxyXG4vLyBUb1xyXG4vLyAtLVxyXG4vLyBSZXR1cm4gdGhlICd0bycgZGlyZWN0aW9uIG9mIGEgZmxvd1xyXG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXHJcbkBmdW5jdGlvbiB0byhcclxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcclxuKSB7XHJcbiAgQHJldHVybiBnZXQtZGlyZWN0aW9uKCRmbG93LCB0byk7XHJcbn1cclxuXHJcbi8vIEZyb21cclxuLy8gLS0tLVxyXG4vLyBSZXR1cm4gdGhlICdmcm9tJyBkaXJlY3Rpb24gb2YgYSBmbG93XHJcbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcclxuQGZ1bmN0aW9uIGZyb20oXHJcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXHJcbikge1xyXG4gIEByZXR1cm4gZ2V0LWRpcmVjdGlvbigkZmxvdywgZnJvbSk7XHJcbn1cclxuIiwiLy8gR3JpZCBCYWNrZ3JvdW5kIEFQSVxyXG4vLyA9PT09PT09PT09PT09PT09PT09XHJcbi8vIC0gU3ViLXBpeGVsIHJvdW5kaW5nIGNhbiBsZWFkIHRvIHNldmVyYWwgcGl4ZWxzIHZhcmlhdGlvbiBiZXR3ZWVuIGJyb3dzZXJzLlxyXG5cclxuLy8gR3JpZCBCYWNrZ3JvdW5kIE91dHB1dFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0gJGltYWdlOiBiYWNrZ3JvdW5kLWltYWdlXHJcbi8vIC0gJHNpemU6IGJhY2tncm91bmQtc2l6ZVxyXG4vLyAtICRjbGlwOiBiYWNrZ3JvdW5kLWNsaXBcclxuLy8gLSBbJGZsb3ddOiBsdHIgfCBydGxcclxuQG1peGluIGJhY2tncm91bmQtZ3JpZC1vdXRwdXQgKFxyXG4gICRpbWFnZSxcclxuICAkc2l6ZTogbnVsbCxcclxuICAkY2xpcDogbnVsbCxcclxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcclxuKSB7XHJcbiAgJG91dHB1dDogKFxyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogJGltYWdlLFxyXG4gICAgYmFja2dyb3VuZC1zaXplOiAkc2l6ZSxcclxuICAgIGJhY2tncm91bmQtb3JpZ2luOiAkY2xpcCxcclxuICAgIGJhY2tncm91bmQtY2xpcDogJGNsaXAsXHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBmcm9tKCRmbG93KSB0b3AsXHJcbiAgKTtcclxuXHJcbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xyXG59XHJcbiIsIi8vIFNoYXJlZCBDb250YWluZXIgQVBJXHJcbi8vID09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBDb250YWluZXIgT3V0cHV0XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLSBbJHdpZHRoXSAgICAgICAgIDogPGxlbmd0aD5cclxuLy8gLSBbJGp1c3RpZnldICAgICAgIDogbGVmdCB8IGNlbnRlciB8IHJpZ2h0XHJcbi8vIC0gWyRtYXRoXSAgICAgICAgICA6IGZsdWlkIHwgc3RhdGljXHJcbkBtaXhpbiBjb250YWluZXItb3V0cHV0KFxyXG4gICR3aWR0aCxcclxuICAkanVzdGlmeTogYXV0byBhdXRvLFxyXG4gICRwcm9wZXJ0eTogbWF4LXdpZHRoXHJcbikge1xyXG4gICRvdXRwdXQ6IChcclxuICAgICN7JHByb3BlcnR5fTogJHdpZHRoIG9yIDEwMCUsXHJcbiAgICBtYXJnaW4tbGVmdDogbnRoKCRqdXN0aWZ5LCAxKSxcclxuICAgIG1hcmdpbi1yaWdodDogbnRoKCRqdXN0aWZ5LCAyKSxcclxuICApO1xyXG5cclxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XHJcbn1cclxuIiwiLy8gTWFyZ2lucyBBUElcclxuLy8gPT09PT09PT09PT1cclxuXHJcbi8vIE1hcmdpbiBPdXRwdXRcclxuLy8gLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRiZWZvcmUgIDogPGxlbmd0aD5cclxuLy8gLSAkYWZ0ZXIgICA6IDxsZW5ndGg+XHJcbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcclxuQG1peGluIG1hcmdpbi1vdXRwdXQoXHJcbiAgJGJlZm9yZSxcclxuICAkYWZ0ZXIsXHJcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXHJcbikge1xyXG4gICR0bzogdG8oJGZsb3cpO1xyXG4gICRmcm9tOiBmcm9tKCRmbG93KTtcclxuXHJcbiAgJG91dHB1dDogKFxyXG4gICAgbWFyZ2luLSN7JGZyb219OiAkYmVmb3JlLFxyXG4gICAgbWFyZ2luLSN7JHRvfTogJGFmdGVyLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcclxufVxyXG4iLCIvLyBQYWRkaW5nIEFQSVxyXG4vLyA9PT09PT09PT09PVxyXG5cclxuLy8gUGFkZGluZyBPdXRwdXRcclxuLy8gLS0tLS0tLS0tLS0tLS1cclxuLy8gLSAkYmVmb3JlICA6IDxsZW5ndGg+XHJcbi8vIC0gJGFmdGVyICAgOiA8bGVuZ3RoPlxyXG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXHJcbkBtaXhpbiBwYWRkaW5nLW91dHB1dChcclxuICAkYmVmb3JlLFxyXG4gICRhZnRlcixcclxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcclxuKSB7XHJcbiAgJHRvOiB0bygkZmxvdyk7XHJcbiAgJGZyb206IGZyb20oJGZsb3cpO1xyXG5cclxuICAkb3V0cHV0OiAoXHJcbiAgICBwYWRkaW5nLSN7JGZyb219OiAkYmVmb3JlLFxyXG4gICAgcGFkZGluZy0jeyR0b306ICRhZnRlcixcclxuICApO1xyXG5cclxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XHJcbn1cclxuIiwiLy8gRmxvYXQgQ29udGFpbmVyIEFQSVxyXG4vLyA9PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBGbG9hdCBDb250YWluZXJcclxuLy8gLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0gWyR3aWR0aF0gICAgICAgICA6IDxsZW5ndGg+XHJcbi8vIC0gWyRqdXN0aWZ5XSAgICAgICA6IGxlZnQgfCBjZW50ZXIgfCByaWdodFxyXG4vLyAtIFskbWF0aF0gICA6IGZsdWlkIHwgc3RhdGljXHJcbkBtaXhpbiBmbG9hdC1jb250YWluZXIoXHJcbiAgJHdpZHRoLFxyXG4gICRqdXN0aWZ5OiBhdXRvIGF1dG8sXHJcbiAgJHByb3BlcnR5OiBtYXgtd2lkdGhcclxuKSB7XHJcbiAgQGluY2x1ZGUgc3VzeS1jbGVhcmZpeDtcclxuICBAaW5jbHVkZSBjb250YWluZXItb3V0cHV0KCR3aWR0aCwgJGp1c3RpZnksICRwcm9wZXJ0eSk7XHJcbn1cclxuIiwiLy8gRmxvYXQgU3BhbiBBUElcclxuLy8gPT09PT09PT09PT09PT1cclxuXHJcbi8vIEZsb2F0IFNwYW4gT3V0cHV0XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0gJHdpZHRoICAgICAgICAgICAgIDogPGxlbmd0aD5cclxuLy8gLSBbJGZsb2F0XSAgICAgICAgICAgOiBmcm9tIHwgdG9cclxuLy8gLSBbJG1hcmdpbi1iZWZvcmVdICAgOiA8bGVuZ3RoPlxyXG4vLyAtIFskbWFyZ2luLWFmdGVyXSAgICA6IDxsZW5ndGg+XHJcbi8vIC0gWyRwYWRkaW5nLWJlZm9yZV0gIDogPGxlbmd0aD5cclxuLy8gLSBbJHBhZGRpbmctYWZ0ZXJdICAgOiA8bGVuZ3RoPlxyXG4vLyAtIFskZmxvd10gICAgICAgICAgICA6IGx0ciB8IHJ0bFxyXG5AbWl4aW4gZmxvYXQtc3Bhbi1vdXRwdXQoXHJcbiAgJHdpZHRoLFxyXG4gICRmbG9hdCAgICAgICAgICAgIDogZnJvbSxcclxuICAkbWFyZ2luLWJlZm9yZSAgICA6IG51bGwsXHJcbiAgJG1hcmdpbi1hZnRlciAgICAgOiBudWxsLFxyXG4gICRwYWRkaW5nLWJlZm9yZSAgIDogbnVsbCxcclxuICAkcGFkZGluZy1hZnRlciAgICA6IG51bGwsXHJcbiAgJGZsb3cgICAgICAgICAgICAgOiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxyXG4pIHtcclxuICAkdG8gICAgIDogdG8oJGZsb3cpO1xyXG4gICRmcm9tICAgOiBmcm9tKCRmbG93KTtcclxuXHJcbiAgJG91dHB1dDogKFxyXG4gICAgd2lkdGg6ICR3aWR0aCxcclxuICAgIGZsb2F0OiBpZigkZmxvYXQgPT0gdG8sICR0bywgbnVsbCkgb3IgaWYoJGZsb2F0ID09IGZyb20sICRmcm9tLCBudWxsKSxcclxuICAgIG1hcmdpbi0jeyRmcm9tfTogJG1hcmdpbi1iZWZvcmUsXHJcbiAgICBtYXJnaW4tI3skdG99OiAkbWFyZ2luLWFmdGVyLFxyXG4gICAgcGFkZGluZy0jeyRmcm9tfTogJHBhZGRpbmctYmVmb3JlLFxyXG4gICAgcGFkZGluZy0jeyR0b306ICRwYWRkaW5nLWFmdGVyLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcclxufVxyXG4iLCIvLyBGbG9hdCBFbmRzIEFQSVxyXG4vLyA9PT09PT09PT09PT09PVxyXG5cclxuLy8gU3VzeSBFbmQgRGVmYXVsdHNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLSBQUklWQVRFXHJcbkBpbmNsdWRlIHN1c3ktZGVmYXVsdHMoKFxyXG4gIGxhc3QtZmxvdzogdG8sXHJcbikpO1xyXG5cclxuLy8gRmxvYXQgTGFzdFxyXG4vLyAtLS0tLS0tLS0tXHJcbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcclxuQG1peGluIGZsb2F0LWxhc3QoXHJcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpLFxyXG4gICRsYXN0LWZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGxhc3QtZmxvdyksXHJcbiAgJG1hcmdpbjogMFxyXG4pIHtcclxuICAkdG86IHRvKCRmbG93KTtcclxuXHJcbiAgJG91dHB1dDogKFxyXG4gICAgZmxvYXQ6IGlmKCRsYXN0LWZsb3cgPT0gdG8sICR0bywgbnVsbCksXHJcbiAgICBtYXJnaW4tI3skdG99OiAkbWFyZ2luLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcclxufVxyXG5cclxuLy8gRmxvYXQgRmlyc3RcclxuLy8gLS0tLS0tLS0tLS1cclxuLy8gLSBbJGZsb3ddICA6IGx0ciB8IHJ0bFxyXG5AbWl4aW4gZmxvYXQtZmlyc3QoXHJcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXHJcbikge1xyXG4gICRvdXRwdXQ6IChcclxuICAgIG1hcmdpbi0je2Zyb20oJGZsb3cpfTogMCxcclxuICApO1xyXG5cclxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XHJcbn1cclxuIiwiLy8gRmxvYXQgSXNvbGF0aW9uIEFQSVxyXG4vLyA9PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBJc29sYXRlIE91dHB1dFxyXG4vLyAtLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRwdXNoICAgIDogPGxlbmd0aD5cclxuLy8gLSBbJGZsb3ddICA6IGx0ciB8IHJ0bFxyXG5AbWl4aW4gaXNvbGF0ZS1vdXRwdXQoXHJcbiAgJHB1c2gsXHJcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXHJcbikge1xyXG4gICR0bzogdG8oJGZsb3cpO1xyXG4gICRmcm9tOiBmcm9tKCRmbG93KTtcclxuXHJcbiAgJG91dHB1dDogKFxyXG4gICAgZmxvYXQ6ICRmcm9tLFxyXG4gICAgbWFyZ2luLSN7JGZyb219OiAkcHVzaCxcclxuICAgIG1hcmdpbi0jeyR0b306IC0xMDAlLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcclxufVxyXG4iLCIvLyBTdXN5IFNldHRpbmdzXHJcbi8vID09PT09PT09PT09PT1cclxuXHJcbi8vIFN1c3kgTGFuZ3VhZ2UgRGVmYXVsdHNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtIFBSSVZBVEVcclxuQGluY2x1ZGUgc3VzeS1kZWZhdWx0cygoXHJcbiAgY29udGFpbmVyOiBhdXRvLFxyXG4gIG1hdGg6IGZsdWlkLFxyXG4gIG91dHB1dDogZmxvYXQsXHJcbiAgY29udGFpbmVyLXBvc2l0aW9uOiBjZW50ZXIsXHJcbiAgZ3V0dGVyLXBvc2l0aW9uOiBhZnRlcixcclxuICBnbG9iYWwtYm94LXNpemluZzogY29udGVudC1ib3gsXHJcbiAgZGVidWc6IChcclxuICAgIGltYWdlOiBoaWRlLFxyXG4gICAgY29sb3I6IHJnYmEoIzY2ZiwgLjI1KSxcclxuICAgIG91dHB1dDogYmFja2dyb3VuZCxcclxuICAgIHRvZ2dsZTogdG9wIHJpZ2h0LFxyXG4gICksXHJcbikpO1xyXG5cclxuXHJcbi8vIFZhbGlkIEtleXdvcmQgVmFsdWVzXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0gUFJJVkFURTogRE9OVCdUIFRPVUNIXHJcbiRzdXN5LWtleXdvcmRzOiAoXHJcbiAgY29udGFpbmVyOiBhdXRvLFxyXG4gIG1hdGg6IHN0YXRpYyBmbHVpZCxcclxuICBvdXRwdXQ6IGlzb2xhdGUgZmxvYXQsXHJcbiAgY29udGFpbmVyLXBvc2l0aW9uOiBsZWZ0IGNlbnRlciByaWdodCxcclxuICBmbG93OiBsdHIgcnRsLFxyXG4gIGd1dHRlci1wb3NpdGlvbjogYmVmb3JlIGFmdGVyIHNwbGl0IGluc2lkZSBpbnNpZGUtc3RhdGljLFxyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3ggY29udGVudC1ib3gsXHJcbiAgc3BhbjogZnVsbCxcclxuICBlZGdlOiBmaXJzdCBhbHBoYSBsYXN0IG9tZWdhIGZ1bGwsXHJcbiAgc3ByZWFkOiBuYXJyb3cgd2lkZSB3aWRlcixcclxuICBndXR0ZXItb3ZlcnJpZGU6IG5vLWd1dHRlcnMgbm8tZ3V0dGVyLFxyXG4gIHJvbGU6IG5lc3QsXHJcbiAgY2xlYXI6IGJyZWFrIG5vYnJlYWssXHJcbiAgZGVidWcgaW1hZ2U6IHNob3cgaGlkZSBzaG93LWNvbHVtbnMgc2hvdy1iYXNlbGluZSxcclxuICBkZWJ1ZyBvdXRwdXQ6IGJhY2tncm91bmQgb3ZlcmxheSxcclxuKTtcclxuXHJcblxyXG4vLyBQYXJzZSBTdXN5IEtleXdvcmRzIGFuZCBNYXBzXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQGZ1bmN0aW9uIHBhcnNlLXNldHRpbmdzKFxyXG4gICRzaG9ydDogJHN1c3lcclxuKSB7XHJcbiAgJF9yZXR1cm46ICgpO1xyXG5cclxuICBAaWYgdHlwZS1vZigkc2hvcnQpID09IG1hcCB7XHJcbiAgICAkX3JldHVybjogJHNob3J0O1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQGVhY2ggJGl0ZW0gaW4gJHNob3J0IHtcclxuICAgICAgLy8gc3RyaW5nc1xyXG4gICAgICBAaWYgdHlwZS1vZigkaXRlbSkgPT0gc3RyaW5nIHtcclxuICAgICAgICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJHN1c3kta2V5d29yZHMge1xyXG4gICAgICAgICAgQGlmIGluZGV4KCR2YWx1ZSwgJGl0ZW0pIHtcclxuICAgICAgICAgICAgJF9rZXktdmFsdWU6IGFwcGVuZCgka2V5LCAkaXRlbSk7XHJcbiAgICAgICAgICAgICRfcmV0dXJuOiBfc3VzeS1kZWVwLXNldCgkX3JldHVybiwgJF9rZXktdmFsdWUuLi4pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgLy8gbWFwc1xyXG4gICAgICB9IEBlbHNlIGlmIHR5cGUtb2YoJGl0ZW0pID09IG1hcCB7XHJcbiAgICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgJGl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcblxyXG5cclxuLy8gUGFyc2UgQ29sdW1ucyAmIEd1dHRlcnNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQGZ1bmN0aW9uIHBhcnNlLWxheW91dChcclxuICAkc2hvcnRcclxuKSB7XHJcbiAgJF9yZXR1cm46ICgpO1xyXG4gICRfY29sdW1uczogKCk7XHJcbiAgJF9ndXR0ZXJzOiBudWxsO1xyXG5cclxuICBAaWYgbm90KHVuaXRsZXNzKG50aChudGgoJHNob3J0LCAxKSwgMSkpKSB7XHJcbiAgICAkX2d1dHRlcnM6IG50aCgkc2hvcnQsIDEpO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJF9jb2x1bW5zOiAoY29sdW1uczogbnRoKCRzaG9ydCwgMSkpO1xyXG4gICAgJF9ndXR0ZXJzOiBpZihsZW5ndGgoJHNob3J0KSA+IDEsIG50aCgkc2hvcnQsIDIpLCAkX2d1dHRlcnMpO1xyXG4gIH1cclxuXHJcbiAgQGlmIHR5cGUtb2YoJF9ndXR0ZXJzKSA9PSBsaXN0IGFuZCBsZW5ndGgoJF9ndXR0ZXJzKSA+IDAge1xyXG4gICAgJF9ndXR0ZXJzOiAoXHJcbiAgICAgIGd1dHRlcnM6IG50aCgkX2d1dHRlcnMsIDIpIC8gbnRoKCRfZ3V0dGVycywgMSksXHJcbiAgICAgIGNvbHVtbi13aWR0aDogbnRoKCRfZ3V0dGVycywgMSksXHJcbiAgICApO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJF9ndXR0ZXJzOiBpZigkX2d1dHRlcnMsIChndXR0ZXJzOiAkX2d1dHRlcnMpLCAoKSk7XHJcbiAgfVxyXG5cclxuICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAkX2NvbHVtbnMpO1xyXG4gICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sICRfZ3V0dGVycyk7XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcblxyXG4vLyBQYXJzZSBHcmlkL0NvbnRleHRcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkBmdW5jdGlvbiBwYXJzZS1ncmlkKFxyXG4gICRzaG9ydDogJHN1c3lcclxuKSB7XHJcbiAgJF9yZXR1cm46IHBhcnNlLXNldHRpbmdzKCRzaG9ydCk7XHJcbiAgJF9sYXlvdXQ6ICgpO1xyXG5cclxuICBAaWYgdHlwZS1vZigkc2hvcnQpID09IG1hcCB7XHJcbiAgICAkX3JldHVybjogJHNob3J0O1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQGVhY2ggJGl0ZW0gaW4gJHNob3J0IHtcclxuICAgICAgLy8gbnVtYmVyIG9yIGxpc3RcclxuICAgICAgQGlmIHR5cGUtb2YoJGl0ZW0pID09IG51bWJlciBvciB0eXBlLW9mKCRpdGVtKSA9PSBsaXN0IHtcclxuICAgICAgICBAaWYgdHlwZS1vZigkaXRlbSkgPT0gbGlzdCBvciB1bml0bGVzcygkaXRlbSkge1xyXG4gICAgICAgICAgJF9sYXlvdXQ6IGFwcGVuZCgkX2xheW91dCwgJGl0ZW0pO1xyXG4gICAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGNvbnRhaW5lcjogJGl0ZW0pKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkX2xheW91dDogaWYobGVuZ3RoKCRfbGF5b3V0KSA+IDAsIHBhcnNlLWxheW91dCgkX2xheW91dCksICRfbGF5b3V0KTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gbWFwLW1lcmdlKCRfcmV0dXJuLCAkX2xheW91dCk7XHJcbn1cclxuXHJcblxyXG4vLyBQYXJzZSBTcGFuXHJcbi8vIC0tLS0tLS0tLS1cclxuQGZ1bmN0aW9uIHBhcnNlLXNwYW4oXHJcbiAgJHNob3J0LFxyXG4gICRrZXk6IHNwYW5cclxuKSB7XHJcbiAgJF9yZXR1cm46ICgpO1xyXG5cclxuICBAaWYgdHlwZS1vZigkc2hvcnQpID09IG1hcCB7XHJcbiAgICAkX3JldHVybjogJHNob3J0O1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJF9hdDogaW5kZXgoJHNob3J0LCBhdCk7XHJcblxyXG4gICAgQGlmICRfYXQge1xyXG4gICAgICAkX2xvY2k6ICRfYXQgKyAxO1xyXG4gICAgICAkX2xvY2F0aW9uOiBudGgoJHNob3J0LCAkX2xvY2kpO1xyXG4gICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAobG9jYXRpb246ICRfbG9jYXRpb24pKTtcclxuICAgICAgJHNob3J0OiBzZXQtbnRoKCRzaG9ydCwgJF9hdCwgbnVsbCk7XHJcbiAgICAgICRzaG9ydDogc2V0LW50aCgkc2hvcnQsICRfbG9jaSwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgJF9pOiAxO1xyXG4gICAgJF9zcGFuOiAoKTtcclxuXHJcbiAgICBAd2hpbGUgJF9pIDw9IGxlbmd0aCgkc2hvcnQpIHtcclxuICAgICAgJF90aGlzOiBudGgoJHNob3J0LCAkX2kpO1xyXG5cclxuICAgICAgQGlmIHR5cGUtb2YoJF90aGlzKSA9PSBudW1iZXIge1xyXG4gICAgICAgICRfc3BhbjogYXBwZW5kKCRfc3BhbiwgJF90aGlzKTtcclxuICAgICAgICAkc2hvcnQ6IHNldC1udGgoJHNob3J0LCAkX2ksIG51bGwpO1xyXG4gICAgICB9IEBlbHNlIGlmICRfdGhpcyA9PSBvZiB7XHJcbiAgICAgICAgJHNob3J0OiBzZXQtbnRoKCRzaG9ydCwgJF9pLCBudWxsKTtcclxuICAgICAgICAkX2k6IGxlbmd0aCgkc2hvcnQpICsgMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJF9pOiAkX2kgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIEBpZiBsZW5ndGgoJF9zcGFuKSA+IDAge1xyXG4gICAgICAkX3NwYW46IGlmKGxlbmd0aCgkX3NwYW4pID09IDEsIG50aCgkX3NwYW4sIDEpLCAkX3NwYW4pO1xyXG4gICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoJGtleTogJF9zcGFuKSk7XHJcbiAgICB9XHJcblxyXG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgcGFyc2UtZ3JpZCgkc2hvcnQpKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcblxyXG4vLyBQYXJzZSBHdXR0ZXJzXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuQGZ1bmN0aW9uIHBhcnNlLWd1dHRlcnMoXHJcbiAgJHNob3J0OiAkc3VzeVxyXG4pIHtcclxuICAkX2d1dHRlcnM6IHBhcnNlLXNwYW4oJHNob3J0LCBndXR0ZXItb3ZlcnJpZGUpO1xyXG4gICRfc3Bhbjogc3VzeS1nZXQoZ3V0dGVyLW92ZXJyaWRlLCAkX2d1dHRlcnMpO1xyXG5cclxuICBAaWYgJF9zcGFuIGFuZCBub3QobWFwLWdldCgkX2d1dHRlcnMsIGNvbHVtbnMpKSB7XHJcbiAgICAkX2NvbnRleHQ6ICgpO1xyXG4gICAgJF9uZXc6ICgpO1xyXG5cclxuICAgIEBlYWNoICRpdGVtIGluICRfc3BhbiB7XHJcbiAgICAgIEBpZiB0eXBlLW9mKCRpdGVtKSA9PSBudW1iZXIgYW5kIHVuaXRsZXNzKCRpdGVtKSB7XHJcbiAgICAgICAgJF9jb250ZXh0OiBhcHBlbmQoJF9jb250ZXh0LCAkaXRlbSk7XHJcbiAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICRfbmV3OiBhcHBlbmQoJF9uZXcsICRpdGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICRfY29udGV4dDogcGFyc2UtZ3JpZCgkX2NvbnRleHQpO1xyXG4gICAgJF9uZXc6IGlmKGxlbmd0aCgkX25ldykgPT0gMCwgbnVsbCwgJF9uZXcpO1xyXG4gICAgJF9uZXc6IGlmKGxlbmd0aCgkX25ldykgPT0gMSwgbnRoKCRfbmV3LCAxKSwgJF9uZXcpO1xyXG4gICAgJF9uZXc6IChndXR0ZXItb3ZlcnJpZGU6IGlmKCRfbmV3ICE9ICRfc3BhbiwgJF9uZXcsICRfc3BhbikpO1xyXG5cclxuICAgICRfZ3V0dGVyczogbWFwLW1lcmdlKCRfZ3V0dGVycywgJF9uZXcpO1xyXG4gICAgJF9ndXR0ZXJzOiBtYXAtbWVyZ2UoJF9ndXR0ZXJzLCAkX2NvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkX2d1dHRlcnM7XHJcbn1cclxuIiwiLy8gVmFsaWRhdGlvblxyXG4vLyA9PT09PT09PT09XHJcblxyXG5cclxuLy8gVmFsaWRhdGUgQ29sdW1uIE1hdGhcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQGZ1bmN0aW9uIHZhbGlkLWNvbHVtbi1tYXRoKFxyXG4gICRtYXRoLFxyXG4gICRjb2x1bW4td2lkdGhcclxuKSB7XHJcbiAgQGlmICRtYXRoID09IHN0YXRpYyBhbmQgbm90KCRjb2x1bW4td2lkdGgpIHtcclxuICAgIEB3YXJuICdTdGF0aWMgbWF0aCByZXF1aXJlcyBhIHZhbGlkIGNvbHVtbi13aWR0aCBzZXR0aW5nLic7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAcmV0dXJuICRjb2x1bW4td2lkdGg7XHJcbiAgfVxyXG59XHJcbiIsIi8vIEdyaWQgU3ludGF4XHJcbi8vID09PT09PT09PT09XHJcblxyXG5cclxuLy8gTGF5b3V0XHJcbi8vIC0tLS0tLVxyXG4vLyBTZXQgYSBuZXcgbGF5b3V0IHVzaW5nIGEgc2hvcnRoYW5kXHJcbi8vIC0gJGxheW91dDogPHNldHRpbmdzPlxyXG4vLyAtICRjbGVhbjogYm9vbGVhblxyXG5AbWl4aW4gbGF5b3V0KFxyXG4gICRsYXlvdXQsXHJcbiAgJGNsZWFuOiBmYWxzZVxyXG4pIHtcclxuICAkaW5zcGVjdCAgOiAkbGF5b3V0O1xyXG4gICRzdXN5ICAgICA6IF9nZXQtbGF5b3V0KCRsYXlvdXQsICRjbGVhbikgIWdsb2JhbDtcclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGxheW91dCwgJGluc3BlY3QpO1xyXG59XHJcblxyXG5cclxuLy8gVXNlIEdyaWRcclxuLy8gLS0tLS0tLS1cclxuLy8gVXNlIGFuIGFyYml0cmFyeSBsYXlvdXQgZm9yIGEgc2VjdGlvbiBvZiBjb2RlXHJcbi8vIC0gJGxheW91dDogPHNldHRpbmdzPlxyXG4vLyAtICRjbGVhbjogYm9vbGVhblxyXG5AbWl4aW4gd2l0aC1sYXlvdXQoXHJcbiAgJGxheW91dCxcclxuICAkY2xlYW46IGZhbHNlXHJcbikge1xyXG4gICRpbnNwZWN0ICA6ICRsYXlvdXQ7XHJcbiAgJG9sZCAgICAgIDogJHN1c3k7XHJcbiAgJHN1c3kgICAgIDogX2dldC1sYXlvdXQoJGxheW91dCwgJGNsZWFuKSAhZ2xvYmFsO1xyXG5cclxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3Qod2l0aC1sYXlvdXQsICRpbnNwZWN0KTtcclxuXHJcbiAgQGNvbnRlbnQ7XHJcblxyXG4gICRzdXN5OiAkb2xkICFnbG9iYWw7XHJcbn1cclxuXHJcblxyXG4vLyBMYXlvdXRcclxuLy8gLS0tLS0tXHJcbi8vIFJldHVybiBhIHBhcnNlZCBsYXlvdXQgbWFwIGJhc2VkIG9uIHNob3J0aGFuZCBzeW50YXhcclxuLy8gLSAkbGF5b3V0OiA8c2V0dGluZ3M+XHJcbkBmdW5jdGlvbiBsYXlvdXQoXHJcbiAgJGxheW91dDogJHN1c3lcclxuKSB7XHJcbiAgQHJldHVybiBwYXJzZS1ncmlkKCRsYXlvdXQpO1xyXG59XHJcblxyXG5cclxuLy8gR2V0IExheW91dFxyXG4vLyAtLS0tLS0tLS0tXHJcbi8vIFJldHVybiBhIG5ldyBsYXlvdXQgYmFzZWQgb24gY3VycmVudCBhbmQgZ2l2ZW4gc2V0dGluZ3NcclxuLy8gLSAkbGF5b3V0OiA8c2V0dGluZ3M+XHJcbi8vIC0gJGNsZWFuOiBib29sZWFuXHJcbkBmdW5jdGlvbiBfZ2V0LWxheW91dChcclxuICAkbGF5b3V0LFxyXG4gICRjbGVhbjogZmFsc2VcclxuKSB7XHJcbiAgJGxheW91dDogbGF5b3V0KCRsYXlvdXQpO1xyXG4gIEByZXR1cm4gaWYoJGNsZWFuLCAkbGF5b3V0LCBfc3VzeS1kZWVwLW1lcmdlKCRzdXN5LCAkbGF5b3V0KSk7XHJcbn1cclxuIiwiLy8gU3VzeSBCb3ggU2l6aW5nXHJcbi8vID09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBHbG9iYWwgQm94IFNpemluZ1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBTZXQgYSBib3ggbW9kZWwgZ2xvYmFsbHkgb24gYWxsIGVsZW1lbnRzLlxyXG4vLyAtIFskYm94XTogYm9yZGVyLWJveCB8IGNvbnRlbnQtYm94XHJcbi8vIC0gWyRpbmhlcml0XTogdHJ1ZSB8IGZhbHNlXHJcbkBtaXhpbiBnbG9iYWwtYm94LXNpemluZyhcclxuICAkYm94OiBzdXN5LWdldChnbG9iYWwtYm94LXNpemluZyksXHJcbiAgJGluaGVyaXQ6IGZhbHNlXHJcbikge1xyXG4gICRpbnNwZWN0OiAkYm94O1xyXG5cclxuICBAaWYgJGluaGVyaXQge1xyXG4gICAgQGF0LXJvb3Qge1xyXG4gICAgICAgaHRtbCB7IEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJGJveCkpOyB9XHJcbiAgICAgICAqLCAqOmJlZm9yZSwgKjphZnRlciB7IGJveC1zaXppbmc6IGluaGVyaXQ7IH1cclxuICAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAqLCAqOmJlZm9yZSwgKjphZnRlciB7IEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJGJveCkpOyB9XHJcbiAgfVxyXG5cclxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoZ2xvYmFsLWJveC1zaXppbmcsICRpbnNwZWN0KTtcclxuICBAaW5jbHVkZSB1cGRhdGUtYm94LW1vZGVsKCRib3gpO1xyXG59XHJcblxyXG4vLyBCb3JkZXIgQm94IFNpemluZ1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBBIGxlZ2FjeSBzaG9ydGN1dC4uLlxyXG4vLyAtIFskaW5oZXJpdF06IHRydWUgfCBmYWxzZVxyXG5AbWl4aW4gYm9yZGVyLWJveC1zaXppbmcoXHJcbiAgJGluaGVyaXQ6IGZhbHNlXHJcbikge1xyXG4gIEBpbmNsdWRlIGdsb2JhbC1ib3gtc2l6aW5nKGJvcmRlci1ib3gsICRpbmhlcml0KTtcclxufVxyXG5cclxuLy8gVXBkYXRlIEJveCBNb2RlbFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFBSSVZBVEU6IFVwZGF0ZXMgZ2xvYmFsIGJveCBtb2RlbCBzZXR0aW5nXHJcbkBtaXhpbiB1cGRhdGUtYm94LW1vZGVsKFxyXG4gICRib3hcclxuKSB7XHJcbiAgQGlmICRib3ggIT0gc3VzeS1nZXQoZ2xvYmFsLWJveC1zaXppbmcpIHtcclxuICBAaW5jbHVkZSBzdXN5LXNldChnbG9iYWwtYm94LXNpemluZywgJGJveCk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIENvbnRleHQgU3ludGF4XHJcbi8vID09PT09PT09PT09PT09XHJcblxyXG4vLyBOZXN0ZWQgW2Z1bmN0aW9uXVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBSZXR1cm4gYSBzdWJzZXQgZ3JpZCBmb3IgbmVzdGVkIGNvbnRleHQuXHJcbi8vIC0gJGNvbnRleHQgICA6IDxzcGFuPlxyXG5AZnVuY3Rpb24gbmVzdGVkKFxyXG4gICRjb250ZXh0XHJcbikge1xyXG4gICRjb250ZXh0ICAgIDogcGFyc2Utc3BhbigkY29udGV4dCk7XHJcbiAgJHNwYW4gICAgICAgOiBzdXN5LWdldChzcGFuLCAkY29udGV4dCk7XHJcbiAgJGxvY2F0aW9uICAgOiBnZXQtbG9jYXRpb24oJGNvbnRleHQpO1xyXG4gICRjb2x1bW5zICAgIDogc3VzeS1nZXQoY29sdW1ucywgJGNvbnRleHQpO1xyXG5cclxuICBAcmV0dXJuIHN1c3ktc2xpY2UoJHNwYW4sICRsb2NhdGlvbiwgJGNvbHVtbnMpO1xyXG59XHJcblxyXG4vLyBOZXN0ZWQgW21peGluXVxyXG4vLyAtLS0tLS0tLS0tLS0tLVxyXG4vLyBVc2UgYSBzdWJzZXQgZ3JpZCBmb3IgYSBuZXN0ZWQgY29udGV4dFxyXG4vLyAtICRjb250ZXh0ICAgOiA8c3Bhbj5cclxuLy8gLSBAY29udGVudCAgIDogPGNvbnRlbnQ+XHJcbkBtaXhpbiBuZXN0ZWQoXHJcbiAgJGNvbnRleHRcclxuKSB7XHJcbiAgJGluc3BlY3QgIDogJGNvbnRleHQ7XHJcbiAgJGNvbnRleHQgIDogcGFyc2Utc3BhbigkY29udGV4dCk7XHJcbiAgJG9sZCAgICAgIDogc3VzeS1nZXQoY29sdW1ucyk7XHJcbiAgJHN1c3kgICAgIDogbWFwLW1lcmdlKCRzdXN5LCAoY29sdW1uczogbmVzdGVkKCRjb250ZXh0KSkpICFnbG9iYWw7XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChuZXN0ZWQsICRpbnNwZWN0KTtcclxuICBAY29udGVudDtcclxuXHJcbiAgJHN1c3kgICAgIDogbWFwLW1lcmdlKCRzdXN5LCAoY29sdW1uczogJG9sZCkpICFnbG9iYWw7XHJcbn1cclxuIiwiLy8gQmFja2dyb3VuZCBHcmlkIFN5bnRheFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4kc3VzeS1vdmVybGF5LWdyaWQtaGVhZC1leGlzdHM6IGZhbHNlO1xyXG5cclxuXHJcbi8vIFNob3cgR3JpZC9zXHJcbi8vIC0tLS0tLS0tLS0tXHJcbi8vIFNob3cgZ3JpZCBvbiBhbnkgZWxlbWVudCB1c2luZyBlaXRoZXIgYmFja2dyb3VuZCBvciBvdmVybGF5LlxyXG4vLyAtIFskZ3JpZF0gIDogPHNldHRpbmdzPlxyXG5AbWl4aW4gc2hvdy1ncmlkKFxyXG4gICRncmlkOiAkc3VzeVxyXG4pIHtcclxuICAkaW5zcGVjdDogJGdyaWQ7XHJcbiAgJF9vdXRwdXQ6IGRlYnVnLWdldChvdXRwdXQsICRncmlkKTtcclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHNob3ctZ3JpZCwgJGluc3BlY3QpO1xyXG4gIEBpZiAkX291dHB1dCA9PSBvdmVybGF5IGFuZCBzdXN5LWdldChkZWJ1ZyBpbWFnZSwgJGdyaWQpICE9IGhpZGUge1xyXG4gICAgQGluY2x1ZGUgb3ZlcmxheS1ncmlkKCRncmlkKTtcclxuICB9IEBlbHNlIHtcclxuICAgIEBpbmNsdWRlIGJhY2tncm91bmQtZ3JpZCgkZ3JpZCk7XHJcbiAgfVxyXG59XHJcblxyXG5AbWl4aW4gc2hvdy1ncmlkcyhcclxuICAkZ3JpZDogJHN1c3lcclxuKSB7XHJcbiAgQGluY2x1ZGUgc2hvdy1ncmlkKCRncmlkKTtcclxufVxyXG5cclxuLy8gQmFja2dyb3VuZCBHcmlkXHJcbi8vIC0tLS0tLS0tLS0tLS0tLVxyXG4vLyBTaG93IGEgZ3JpZCBiYWNrZ3JvdW5kIG9uIGFueSBlbGVtZW50LlxyXG4vLyAtIFskZ3JpZF0gIDogPHNldHRpbmdzPlxyXG5AbWl4aW4gYmFja2dyb3VuZC1ncmlkKFxyXG4gICRncmlkOiAkc3VzeVxyXG4pIHtcclxuICAkaW5zcGVjdCAgOiAkZ3JpZDtcclxuICAkX291dHB1dCAgOiBnZXQtYmFja2dyb3VuZCgkZ3JpZCk7XHJcblxyXG4gIEBpZiBsZW5ndGgoJF9vdXRwdXQpID4gMCB7XHJcbiAgICAkX2Zsb3c6IHN1c3ktZ2V0KGZsb3csICRncmlkKTtcclxuXHJcbiAgICAkX2ltYWdlOiAoKTtcclxuICAgIEBlYWNoICRuYW1lLCAkbGF5ZXIgaW4gbWFwLWdldCgkX291dHB1dCwgaW1hZ2UpIHtcclxuICAgICAgJF9kaXJlY3Rpb246IGlmKCRuYW1lID09IGJhc2VsaW5lLCB0byBib3R0b20sIHRvIHRvKCRfZmxvdykpO1xyXG4gICAgICAkX2ltYWdlOiBhcHBlbmQoJF9pbWFnZSwgbGluZWFyLWdyYWRpZW50KCRfZGlyZWN0aW9uLCAkbGF5ZXIpLCBjb21tYSk7XHJcbiAgICB9XHJcbiAgICAkX291dHB1dDogbWFwLW1lcmdlKCRfb3V0cHV0LCAoaW1hZ2U6ICRfaW1hZ2UpKTtcclxuXHJcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWdyaWQtb3V0cHV0KCRfb3V0cHV0Li4uKTtcclxuICAgIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChiYWNrZ3JvdW5kLWdyaWQsICRpbnNwZWN0KTtcclxuICB9XHJcbn1cclxuXHJcblxyXG4vLyBPdmVybGF5IEdyaWRcclxuLy8gLS0tLS0tLS0tLS0tXHJcbi8vIEdlbmVyYXRlIGFuIGljb24gdG8gdHJpZ2dlciBncmlkLW92ZXJsYXlzIG9uIGFueSBnaXZlbiBlbGVtZW50cy5cclxuLy8gJGdyaWRzLi4uICA6IDxzZWxlY3Rvcj4gWzxzZXR0aW5ncz5dIFssIDxzZWxlY3Rvcj5dKlxyXG5AbWl4aW4gb3ZlcmxheS1ncmlkIChcclxuICAkZ3JpZDogJHN1c3lcclxuKSB7XHJcbiAgQGlmIG5vdCgkc3VzeS1vdmVybGF5LWdyaWQtaGVhZC1leGlzdHMpIHtcclxuICAgIEBhdC1yb290IGhlYWQgeyBAaW5jbHVkZSBvdmVybGF5LWhlYWQoJGdyaWQpOyB9XHJcbiAgICBAYXQtcm9vdCBoZWFkOmJlZm9yZSB7IEBpbmNsdWRlIG92ZXJsYXktdHJpZ2dlcjsgfVxyXG4gICAgQGF0LXJvb3QgaGVhZDpob3ZlciB7IEBpbmNsdWRlIG92ZXJsYXktdHJpZ2dlci1ob3ZlcjsgfVxyXG4gICAgJHN1c3ktb3ZlcmxheS1ncmlkLWhlYWQtZXhpc3RzOiB0cnVlICFnbG9iYWw7XHJcbiAgfVxyXG5cclxuICBoZWFkOmhvdmVyIH4gJixcclxuICBoZWFkOmhvdmVyIH4gYm9keSAmIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICY6YmVmb3JlIHtcclxuICAgICAgQGluY2x1ZGUgZ3JpZC1vdmVybGF5LWJhc2U7XHJcbiAgICAgIEBpbmNsdWRlIGJhY2tncm91bmQtZ3JpZCgkZ3JpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gW1ByaXZhdGVdIE92ZXJsYXkgVHJpZ2dlclxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkBtaXhpbiBvdmVybGF5LXRyaWdnZXIge1xyXG4gIGNvbnRlbnQ6IFwifHx8XCI7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgcGFkZGluZzogNXB4IDEwcHg7XHJcbiAgZm9udDoge1xyXG4gICAgZmFtaWx5OiBzYW5zLXNlcmlmO1xyXG4gICAgc2l6ZTogMTZweDtcclxuICAgIHdlaWdodDogYm9sZDtcclxuICB9XHJcbn1cclxuXHJcblxyXG4vLyBbUHJpdmF0ZV0gT3ZlcmxheSBUcmlnZ2VyIEhvdmVyXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQG1peGluIG92ZXJsYXktdHJpZ2dlci1ob3ZlciB7XHJcbiAgYmFja2dyb3VuZDogcmdiYSh3aGl0ZSwgLjUpO1xyXG4gIGNvbG9yOiByZWQ7XHJcbn1cclxuXHJcblxyXG4vLyBbUHJpdmF0ZV0gT3ZlcmxheSBIZWFkXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gPGhlYWQ+IHN0eWxlcyB0byBjcmVhdGUgZ3JpZCBvdmVybGF5IHRvZ2dsZVxyXG5AbWl4aW4gb3ZlcmxheS1oZWFkIChcclxuICAkZ3JpZDogJHN1c3lcclxuKSB7XHJcbiAgJF90b2dnbGU6IGRlYnVnLWdldCh0b2dnbGUsICRncmlkKTtcclxuICAkX2hvcno6IG51bGw7XHJcbiAgJF92ZXJ0OiBudWxsO1xyXG5cclxuICBAZWFjaCAkc2lkZSBpbiAkX3RvZ2dsZSB7XHJcbiAgICAkX2hvcno6IGlmKCRzaWRlID09IGxlZnQgb3IgJHNpZGUgPT0gcmlnaHQsICRzaWRlLCAkX2hvcnopO1xyXG4gICAgJF92ZXJ0OiBpZigkc2lkZSA9PSB0b3Agb3IgJHNpZGUgPT0gYm90dG9tLCAkc2lkZSwgJF92ZXJ0KTtcclxuICB9XHJcblxyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICAjeyRfaG9yen06IDEwcHg7XHJcbiAgI3skX3ZlcnR9OiAxMHB4O1xyXG4gIHotaW5kZXg6IDk5OTtcclxuICBjb2xvcjogIzMzMztcclxuICBiYWNrZ3JvdW5kOiByZ2JhKHdoaXRlLCAuMjUpO1xyXG59XHJcblxyXG5cclxuLy8gW1ByaXZhdGVdIEdyaWQgT3ZlcmxheSBCYXNlXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBCYXNlIHN0eWxlcyBmb3IgZ2VuZXJhdGluZyBhIGdyaWQgb3ZlcmxheVxyXG5AbWl4aW4gZ3JpZC1vdmVybGF5LWJhc2UoKSB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIGJvdHRvbTogMDtcclxuICByaWdodDogMDtcclxuICBjb250ZW50OiBcIiBcIjtcclxuICB6LWluZGV4OiA5OTg7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgU3ltbWV0cmljYWwgQmFja2dyb3VuZFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRncmlkOiA8bWFwPlxyXG5AZnVuY3Rpb24gZ2V0LWJhY2tncm91bmQtc3ltKFxyXG4gICRncmlkXHJcbikge1xyXG4gICRncmlkICAgICAgICAgICA6IHBhcnNlLWdyaWQoJGdyaWQpO1xyXG4gICRfZ3V0dGVycyAgICAgICA6IHN1c3ktZ2V0KGd1dHRlcnMsICRncmlkKTtcclxuICAkX2NvbHVtbi13aWR0aCAgOiBzdXN5LWdldChjb2x1bW4td2lkdGgsICRncmlkKTtcclxuICAkX21hdGggICAgICAgICAgOiBzdXN5LWdldChtYXRoLCAkZ3JpZCk7XHJcblxyXG4gICRfY29sb3IgICAgICAgICA6IGRlYnVnLWdldChjb2xvcik7XHJcbiAgJF90cmFucyAgICAgICAgIDogdHJhbnNwYXJlbnQ7XHJcbiAgJF9saWdodCAgICAgICAgIDogbGlnaHRlbigkX2NvbG9yLCAxNSUpO1xyXG5cclxuICAkX2VuZCAgICAgICAgICAgOiAxICsgJF9ndXR0ZXJzO1xyXG4gICRfYWZ0ZXIgICAgICAgICA6IHBlcmNlbnRhZ2UoMS8kX2VuZCk7XHJcbiAgJF9zdG9wcyAgICAgICAgIDogKCk7XHJcbiAgJF9zaXplICAgICAgICAgIDogc3BhbigxICRncmlkIHdpZGUpO1xyXG5cclxuICBAaWYgaXMtaW5zaWRlKCRncmlkKSB7XHJcbiAgICAkX3N0b3BzOiAkX2NvbG9yLCAkX2xpZ2h0O1xyXG4gIH0gQGVsc2UgaWYgaXMtc3BsaXQoJGdyaWQpIHtcclxuICAgICRfc3BsaXQ6ICRfZ3V0dGVycy8yO1xyXG4gICAgJF9iZWZvcmU6IHBlcmNlbnRhZ2UoJF9zcGxpdC8kX2VuZCk7XHJcbiAgICAkX2FmdGVyOiBwZXJjZW50YWdlKCgxICsgJF9zcGxpdCkvJF9lbmQpO1xyXG4gICAgJF9zdG9wczogJF90cmFucyAkX2JlZm9yZSwgJF9jb2xvciAkX2JlZm9yZSwgJF9saWdodCAkX2FmdGVyLCAkX3RyYW5zICRfYWZ0ZXI7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkX3N0b3BzOiAkX2NvbG9yLCAkX2xpZ2h0ICRfYWZ0ZXIsICRfdHJhbnMgJF9hZnRlcjtcclxuICB9XHJcblxyXG4gIEBpZiAkX21hdGggPT0gc3RhdGljIHtcclxuICAgICRfc2l6ZTogdmFsaWQtY29sdW1uLW1hdGgoJF9tYXRoLCAkX2NvbHVtbi13aWR0aCkgKiAkX2VuZDtcclxuICB9XHJcblxyXG4gICRfb3V0cHV0OiAoXHJcbiAgICBpbWFnZTogKGNvbHVtbnM6ICRfc3RvcHMpLFxyXG4gICAgc2l6ZTogJF9zaXplLFxyXG4gICk7XHJcblxyXG4gIEByZXR1cm4gJF9vdXRwdXQ7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgQXN5bW1ldHJpY2FsIEluc2lkZVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XHJcbkBmdW5jdGlvbiBnZXQtYXN5bS1pbnNpZGUoXHJcbiAgJGdyaWRcclxuKSB7XHJcbiAgJGdyaWQgICAgIDogcGFyc2UtZ3JpZCgkZ3JpZCk7XHJcbiAgJF9jb2x1bW5zIDogc3VzeS1nZXQoY29sdW1ucywgJGdyaWQpO1xyXG5cclxuICAkX2NvbG9yICAgOiBkZWJ1Zy1nZXQoY29sb3IpO1xyXG4gICRfbGlnaHQgICA6IGxpZ2h0ZW4oJF9jb2xvciwgMTUlKTtcclxuICAkX3N0b3BzICAgOiAoKTtcclxuXHJcbiAgQGZvciAkbG9jYXRpb24gZnJvbSAxIHRocm91Z2ggc3VzeS1jb3VudCgkX2NvbHVtbnMpIHtcclxuICAgICR0aGlzLXN0b3A6ICgpO1xyXG5cclxuICAgIEBpZiAkbG9jYXRpb24gPT0gMSB7XHJcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2NvbG9yLCBjb21tYSk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJHN0YXJ0OiBwYXJzZS1zcGFuKDEgYXQgJGxvY2F0aW9uICRncmlkKTtcclxuICAgICAgJHN0YXJ0OiBnZXQtaXNvbGF0aW9uKCRzdGFydCk7XHJcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2NvbG9yICRzdGFydCwgY29tbWEpO1xyXG4gICAgfVxyXG5cclxuICAgIEBpZiAkbG9jYXRpb24gPT0gc3VzeS1jb3VudCgkX2NvbHVtbnMpIHtcclxuICAgICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfbGlnaHQsIGNvbW1hKTtcclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICAkX2VuZDogcGFyc2Utc3BhbigxIGF0ICgkbG9jYXRpb24gKyAxKSAkZ3JpZCk7XHJcbiAgICAgICRfZW5kOiBnZXQtaXNvbGF0aW9uKCRfZW5kKTtcclxuICAgICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfbGlnaHQgJF9lbmQsIGNvbW1hKTtcclxuICAgIH1cclxuXHJcbiAgICAkX3N0b3BzOiBqb2luKCRfc3RvcHMsICR0aGlzLXN0b3AsIGNvbW1hKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9zdG9wcztcclxufVxyXG5cclxuXHJcbi8vIEdldCBBc3ltbWV0cmljYWwgU3BsaXRcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XHJcbkBmdW5jdGlvbiBnZXQtYXN5bS1zcGxpdChcclxuICAkZ3JpZFxyXG4pIHtcclxuICAkZ3JpZCAgICAgOiBwYXJzZS1ncmlkKCRncmlkKTtcclxuICAkX2NvbHVtbnMgOiBzdXN5LWdldChjb2x1bW5zLCAkZ3JpZCk7XHJcblxyXG4gICRfY29sb3IgICA6IGRlYnVnLWdldChjb2xvcik7XHJcbiAgJF9saWdodCAgIDogbGlnaHRlbigkX2NvbG9yLCAxNSUpO1xyXG4gICRfc3RvcHMgICA6ICgpO1xyXG5cclxuICBAZm9yICRsb2NhdGlvbiBmcm9tIDEgdGhyb3VnaCBzdXN5LWNvdW50KCRfY29sdW1ucykge1xyXG4gICAgJHRoaXMtc3RvcDogKCk7XHJcblxyXG4gICAgJHN0YXJ0OiBwYXJzZS1zcGFuKDEgYXQgJGxvY2F0aW9uICRncmlkKTtcclxuICAgICRzdGFydDogZ2V0LWlzb2xhdGlvbigkc3RhcnQpO1xyXG4gICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsIHRyYW5zcGFyZW50ICRzdGFydCwgY29tbWEpO1xyXG4gICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfY29sb3IgJHN0YXJ0LCBjb21tYSk7XHJcblxyXG4gICAgJF9lbmQ6ICRzdGFydCArIHNwYW4oMSBhdCAkbG9jYXRpb24gJGdyaWQpO1xyXG4gICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfbGlnaHQgJF9lbmQsIGNvbW1hKTtcclxuICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCB0cmFuc3BhcmVudCAkX2VuZCwgY29tbWEpO1xyXG5cclxuICAgICRfc3RvcHM6IGpvaW4oJF9zdG9wcywgJHRoaXMtc3RvcCwgY29tbWEpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkX3N0b3BzO1xyXG59XHJcblxyXG5cclxuLy8gR2V0IEFzeW1tZXRyaWNhbCBPdXRzaWRlXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XHJcbkBmdW5jdGlvbiBnZXQtYXN5bS1vdXRzaWRlKFxyXG4gICRncmlkXHJcbikge1xyXG4gICRncmlkICAgICA6IHBhcnNlLWdyaWQoJGdyaWQpO1xyXG4gICRfY29sdW1ucyA6IHN1c3ktZ2V0KGNvbHVtbnMsICRncmlkKTtcclxuXHJcbiAgJF9jb2xvciAgIDogZGVidWctZ2V0KGNvbG9yKTtcclxuICAkX2xpZ2h0ICAgOiBsaWdodGVuKCRfY29sb3IsIDE1JSk7XHJcbiAgJF90cmFucyAgIDogdHJhbnNwYXJlbnQ7XHJcbiAgJF9zdG9wcyAgIDogKCk7XHJcblxyXG4gIEBmb3IgJGxvY2F0aW9uIGZyb20gMSB0aHJvdWdoIHN1c3ktY291bnQoJF9jb2x1bW5zKSB7XHJcbiAgICAkdGhpcy1zdG9wOiAoKTtcclxuXHJcbiAgICBAaWYgJGxvY2F0aW9uID09IDEge1xyXG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9jb2xvciwgY29tbWEpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRzdGFydDogcGFyc2Utc3BhbigxIGF0ICRsb2NhdGlvbiAkZ3JpZCk7XHJcbiAgICAgICRzdGFydDogZ2V0LWlzb2xhdGlvbigkc3RhcnQpO1xyXG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9jb2xvciAkc3RhcnQsIGNvbW1hKTtcclxuICAgIH1cclxuXHJcbiAgICBAaWYgJGxvY2F0aW9uID09IHN1c3ktY291bnQoJF9jb2x1bW5zKSB7XHJcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2xpZ2h0LCBjb21tYSk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJGd1dHRlcjogZ2V0LXNwYW4td2lkdGgoZmlyc3QgJGxvY2F0aW9uICRncmlkKTtcclxuXHJcbiAgICAgICRfZW5kOiBwYXJzZS1zcGFuKDEgYXQgKCRsb2NhdGlvbiArIDEpICRncmlkKTtcclxuICAgICAgJF9lbmQ6IGdldC1pc29sYXRpb24oJF9lbmQpO1xyXG5cclxuICAgICAgJGd1dHRlcjogJF9saWdodCAkZ3V0dGVyLCAkX3RyYW5zICRndXR0ZXIsICRfdHJhbnMgJF9lbmQ7XHJcbiAgICAgICR0aGlzLXN0b3A6IGpvaW4oJHRoaXMtc3RvcCwgJGd1dHRlciwgY29tbWEpO1xyXG4gICAgfVxyXG5cclxuICAgICRfc3RvcHM6IGpvaW4oJF9zdG9wcywgJHRoaXMtc3RvcCwgY29tbWEpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkX3N0b3BzO1xyXG59XHJcblxyXG5cclxuLy8gR2V0IEFzeW1tZXRyaWNhbCBCYWNrZ3JvdW5kXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XHJcbkBmdW5jdGlvbiBnZXQtYmFja2dyb3VuZC1hc3ltKFxyXG4gICRncmlkXHJcbikge1xyXG4gICRfc3RvcHM6ICgpO1xyXG5cclxuICBAaWYgaXMtaW5zaWRlKCRncmlkKSB7XHJcbiAgICAkX3N0b3BzOiBnZXQtYXN5bS1pbnNpZGUoJGdyaWQpO1xyXG4gIH0gQGVsc2UgaWYgaXMtc3BsaXQoJGdyaWQpIHtcclxuICAgICRfc3RvcHM6IGdldC1hc3ltLXNwbGl0KCRncmlkKTtcclxuICB9IEBlbHNlIHtcclxuICAgICRfc3RvcHM6IGdldC1hc3ltLW91dHNpZGUoJGdyaWQpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAoaW1hZ2U6IChjb2x1bW5zOiAkX3N0b3BzKSk7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgQmFja2dyb3VuZFxyXG4vLyAtLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XHJcbkBmdW5jdGlvbiBnZXQtYmFja2dyb3VuZChcclxuICAkZ3JpZFxyXG4pIHtcclxuICAkZ3JpZCAgICAgOiBwYXJzZS1ncmlkKCRncmlkKTtcclxuICAkX3Nob3cgICAgOiBzdXN5LWdldChkZWJ1ZyBpbWFnZSwgJGdyaWQpO1xyXG4gICRfcmV0dXJuICA6ICgpO1xyXG5cclxuICBAaWYgJF9zaG93IGFuZCAkX3Nob3cgIT0gJ2hpZGUnIHtcclxuICAgICRfY29sdW1uczogc3VzeS1nZXQoY29sdW1ucywgJGdyaWQpO1xyXG5cclxuICAgIEBpZiAkX3Nob3cgIT0gJ3Nob3ctYmFzZWxpbmUnIHtcclxuICAgICAgJF9zeW06IGlzLXN5bW1ldHJpY2FsKCRfY29sdW1ucyk7XHJcbiAgICAgICRfcmV0dXJuOiBpZigkX3N5bSwgZ2V0LWJhY2tncm91bmQtc3ltKCRncmlkKSwgZ2V0LWJhY2tncm91bmQtYXN5bSgkZ3JpZCkpO1xyXG4gICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoY2xpcDogY29udGVudC1ib3gpKTtcclxuICAgIH1cclxuXHJcbiAgICBAaWYgJF9zaG93ICE9ICdzaG93LWNvbHVtbnMnXHJcbiAgICAgIGFuZCBnbG9iYWwtdmFyaWFibGUtZXhpc3RzKGJhc2UtbGluZS1oZWlnaHQpXHJcbiAgICAgIGFuZCB0eXBlLW9mKCRiYXNlLWxpbmUtaGVpZ2h0KSA9PSAnbnVtYmVyJ1xyXG4gICAgICBhbmQgbm90IHVuaXRsZXNzKCRiYXNlLWxpbmUtaGVpZ2h0KSB7XHJcbiAgICAgICRfY29sb3I6IHZhcmlhYmxlLWV4aXN0cygnZ3JpZC1iYWNrZ3JvdW5kLWJhc2VsaW5lLWNvbG9yJyk7XHJcbiAgICAgICRfY29sb3I6IGlmKCRfY29sb3IsICRncmlkLWJhY2tncm91bmQtYmFzZWxpbmUtY29sb3IsICMwMDApO1xyXG5cclxuICAgICAgJF9pbWFnZTogbWFwLWdldCgkX3JldHVybiwgaW1hZ2UpO1xyXG4gICAgICAkX3NpemU6IG1hcC1nZXQoJF9yZXR1cm4sIHNpemUpO1xyXG4gICAgICAkX2Jhc2VsaW5lOiAoYmFzZWxpbmU6ICgkX2NvbG9yIDFweCwgdHJhbnNwYXJlbnQgMXB4KSk7XHJcbiAgICAgICRfYmFzZWxpbmUtc2l6ZTogMTAwJSAkYmFzZS1saW5lLWhlaWdodDtcclxuXHJcbiAgICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIChcclxuICAgICAgICBpbWFnZTogaWYoJF9pbWFnZSwgbWFwLW1lcmdlKCRfaW1hZ2UsICRfYmFzZWxpbmUpLCAkX2Jhc2VsaW5lKSxcclxuICAgICAgICBzaXplOiBpZigkX3NpemUsICgkX3NpemUsICRfYmFzZWxpbmUtc2l6ZSksICRfYmFzZWxpbmUtc2l6ZSksXHJcbiAgICAgICkpO1xyXG5cclxuICAgICAgQGlmICRfc2hvdyA9PSAnc2hvdycge1xyXG4gICAgICAgICRfY2xpcDogbWFwLWdldCgkX3JldHVybiwgY2xpcCk7XHJcbiAgICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGNsaXA6IGpvaW4oJF9jbGlwLCBib3JkZXItYm94LCBjb21tYSkpKTtcclxuICAgICAgfVxyXG4gICAgfSBAZWxzZSBpZiAkX3Nob3cgPT0gJ3Nob3ctYmFzZWxpbmUnIHtcclxuICAgICAgQHdhcm4gJ1BsZWFzZSBwcm92aWRlIGEgJGJhc2UtbGluZS1oZWlnaHQgd2l0aCB0aGUgZGVzaXJlZCBoZWlnaHQgYW5kIHVuaXRzJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBpZiBtYXAtZ2V0KCRfcmV0dXJuLCBpbWFnZSkge1xyXG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGZsb3c6IHN1c3ktZ2V0KGZsb3csICRncmlkKSkpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkX3JldHVybjtcclxufVxyXG5cclxuXHJcbi8vIEdldCBEZWJ1Z1xyXG4vLyAtLS0tLS0tLS1cclxuLy8gUmV0dXJuIHRoZSB2YWx1ZSBvZiBhIGRlYnVnIHNldHRpbmdcclxuLy8gLSAka2V5OiA8c2V0dGluZz5cclxuQGZ1bmN0aW9uIGRlYnVnLWdldChcclxuICAka2V5LFxyXG4gICRncmlkOiAkc3VzeVxyXG4pIHtcclxuICAka2V5OiBqb2luKGRlYnVnLCAka2V5LCBzcGFjZSk7XHJcbiAgQHJldHVybiBzdXN5LWdldCgka2V5LCAkZ3JpZCk7XHJcbn1cclxuIiwiLy8gQ29udGFpbmVyIFN5bnRheFxyXG4vLyA9PT09PT09PT09PT09PT09XHJcblxyXG4vLyBDb250YWluZXIgW21peGluXVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBTZXQgYSBjb250YWluZXIgZWxlbWVudFxyXG4vLyAtIFskbGF5b3V0XSAgOiA8c2V0dGluZ3M+XHJcbkBtaXhpbiBjb250YWluZXIoXHJcbiAgJGxheW91dDogJHN1c3lcclxuKSB7XHJcbiAgJGluc3BlY3QgICAgOiAkbGF5b3V0O1xyXG4gICRsYXlvdXQgICAgIDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcclxuXHJcbiAgJF93aWR0aCAgICAgOiBnZXQtY29udGFpbmVyLXdpZHRoKCRsYXlvdXQpO1xyXG4gICRfanVzdGlmeSAgIDogcGFyc2UtY29udGFpbmVyLXBvc2l0aW9uKHN1c3ktZ2V0KGNvbnRhaW5lci1wb3NpdGlvbiwgJGxheW91dCkpO1xyXG4gICRfcHJvcGVydHkgIDogaWYoc3VzeS1nZXQobWF0aCwgJGxheW91dCkgPT0gc3RhdGljLCB3aWR0aCwgbWF4LXdpZHRoKTtcclxuXHJcbiAgJF9ib3ggICAgICAgOiBzdXN5LWdldChib3gtc2l6aW5nLCAkbGF5b3V0KTtcclxuXHJcbiAgQGlmICRfYm94IHtcclxuICAgIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJF9ib3gpKTtcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChjb250YWluZXIsICRpbnNwZWN0KTtcclxuICBAaW5jbHVkZSBmbG9hdC1jb250YWluZXIoJF93aWR0aCwgJF9qdXN0aWZ5LCAkX3Byb3BlcnR5KTtcclxuICBAaW5jbHVkZSBzaG93LWdyaWQoJGxheW91dCk7XHJcbn1cclxuXHJcbi8vIENvbnRhaW5lciBbZnVuY3Rpb25dXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFJldHVybiBjb250YWluZXIgd2lkdGhcclxuLy8gLSBbJGxheW91dF0gIDogPHNldHRpbmdzPlxyXG5AZnVuY3Rpb24gY29udGFpbmVyKFxyXG4gICRsYXlvdXQ6ICRzdXN5XHJcbikge1xyXG4gICRsYXlvdXQ6IHBhcnNlLWdyaWQoJGxheW91dCk7XHJcbiAgQHJldHVybiBnZXQtY29udGFpbmVyLXdpZHRoKCRsYXlvdXQpO1xyXG59XHJcblxyXG4vLyBHZXQgQ29udGFpbmVyIFdpZHRoXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQ2FsY3VsYXRlIHRoZSBjb250YWluZXIgd2lkdGhcclxuLy8gLSBbJGxheW91dF06IDxzZXR0aW5ncz5cclxuQGZ1bmN0aW9uIGdldC1jb250YWluZXItd2lkdGgoXHJcbiAgJGxheW91dDogJHN1c3lcclxuKSB7XHJcbiAgJGxheW91dCAgICAgICAgIDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcclxuICAkX3dpZHRoICAgICAgICAgOiBzdXN5LWdldChjb250YWluZXIsICRsYXlvdXQpO1xyXG4gICRfY29sdW1uLXdpZHRoICA6IHN1c3ktZ2V0KGNvbHVtbi13aWR0aCwgJGxheW91dCk7XHJcbiAgJF9tYXRoICAgICAgICAgIDogc3VzeS1nZXQobWF0aCwgJGxheW91dCk7XHJcblxyXG4gIEBpZiBub3QoJF93aWR0aCkgb3IgJF93aWR0aCA9PSBhdXRvIHtcclxuICAgIEBpZiB2YWxpZC1jb2x1bW4tbWF0aCgkX21hdGgsICRfY29sdW1uLXdpZHRoKSB7XHJcbiAgICAgICRfY29sdW1ucyAgIDogc3VzeS1nZXQoY29sdW1ucywgJGxheW91dCk7XHJcbiAgICAgICRfZ3V0dGVycyAgIDogc3VzeS1nZXQoZ3V0dGVycywgJGxheW91dCk7XHJcbiAgICAgICRfc3ByZWFkICAgIDogaWYoaXMtc3BsaXQoJGxheW91dCksIHdpZGUsIG5hcnJvdyk7XHJcbiAgICAgICRfd2lkdGggICAgIDogc3VzeS1zdW0oJF9jb2x1bW5zLCAkX2d1dHRlcnMsICRfc3ByZWFkKSAqICRfY29sdW1uLXdpZHRoO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRfd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfd2lkdGg7XHJcbn1cclxuXHJcbi8vIFBhcnNlIENvbnRhaW5lciBQb3NpdGlvblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gUGFyc2UgdGhlICRjb250YWluZXItcG9zaXRpb24gaW50byBtYXJnaW4gdmFsdWVzLlxyXG4vLyAtIFskanVzdGlmeV0gICA6IGxlZnQgfCBjZW50ZXIgfCByaWdodCB8IDxsZW5ndGg+IFs8bGVuZ3RoPl1cclxuQGZ1bmN0aW9uIHBhcnNlLWNvbnRhaW5lci1wb3NpdGlvbihcclxuICAkanVzdGlmeTogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgY29udGFpbmVyLXBvc2l0aW9uKVxyXG4pIHtcclxuICAkX3JldHVybjogaWYoJGp1c3RpZnkgPT0gbGVmdCwgMCwgYXV0bykgaWYoJGp1c3RpZnkgPT0gcmlnaHQsIDAsIGF1dG8pO1xyXG5cclxuICBAaWYgbm90KGluZGV4KGxlZnQgcmlnaHQgY2VudGVyLCAkanVzdGlmeSkpIHtcclxuICAgICRfcmV0dXJuOiBudGgoJGp1c3RpZnksIDEpO1xyXG4gICAgJF9yZXR1cm46ICRfcmV0dXJuIGlmKGxlbmd0aCgkanVzdGlmeSkgPiAxLCBudGgoJGp1c3RpZnksIDIpLCAkX3JldHVybik7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcbiIsIi8vIFNwYW4gU3ludGF4XHJcbi8vID09PT09PT09PT09XHJcblxyXG4vLyBTcGFuIFttaXhpbl1cclxuLy8gLS0tLS0tLS0tLS0tXHJcbi8vIFNldCBhIHNwYW5uaW5nIGVsZW1lbnQgdXNpbmcgc2hvcnRoYW5kIHN5bnRheC5cclxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cclxuQG1peGluIHNwYW4oXHJcbiAgJHNwYW5cclxuKSB7XHJcbiAgJGluc3BlY3Q6ICRzcGFuO1xyXG4gICRzcGFuOiBwYXJzZS1zcGFuKCRzcGFuKTtcclxuICAkb3V0cHV0OiBzcGFuLW1hdGgoJHNwYW4pO1xyXG4gICRuZXN0aW5nOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XHJcbiAgJGNsZWFyOiBzdXN5LWdldChjbGVhciwgJHNwYW4pO1xyXG5cclxuICAkYm94OiBzdXN5LWdldChib3gtc2l6aW5nLCAkc3Bhbik7XHJcbiAgJGNvbnRlbnQtYm94OiBpZihzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgIT0gJ2JvcmRlci1ib3gnLCB0cnVlLCBmYWxzZSk7XHJcbiAgJGJveDogJGJveCBvciBpZihpcy1pbnNpZGUoJHNwYW4pIGFuZCAkY29udGVudC1ib3gsIGJvcmRlci1ib3gsIG51bGwpO1xyXG5cclxuICBAaWYgJGNsZWFyID09IGJyZWFrIHtcclxuICAgIEBpbmNsdWRlIGJyZWFrO1xyXG4gIH0gQGVsc2UgaWYgJGNsZWFyID09IG5vYnJlYWsge1xyXG4gICAgQGluY2x1ZGUgbm9icmVhaztcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzcGFuLCAkaW5zcGVjdCk7XHJcbiAgQGluY2x1ZGUgb3V0cHV0KChib3gtc2l6aW5nOiAkYm94KSk7XHJcbiAgQGluY2x1ZGUgZmxvYXQtc3Bhbi1vdXRwdXQoJG91dHB1dC4uLik7XHJcblxyXG4gIEBpZiB2YWxpZC1jb2x1bW5zKCRuZXN0aW5nLCBzaWxlbnQpIHtcclxuICAgIEBpbmNsdWRlIG5lc3RlZCgkc3BhbikgeyBAY29udGVudDsgfVxyXG4gIH0gQGVsc2Uge1xyXG4gICAgQGNvbnRlbnQ7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBTcGFuIFtmdW5jdGlvbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFJldHVybiB0aGUgd2lkdGggb2YgYSBzcGFuLlxyXG4vLyAtICRzcGFuICA6IDxzcGFuPlxyXG5AZnVuY3Rpb24gc3BhbihcclxuICAkc3BhblxyXG4pIHtcclxuICBAcmV0dXJuIGdldC1zcGFuLXdpZHRoKCRzcGFuKTtcclxufVxyXG5cclxuLy8gU3BhbiBNYXRoXHJcbi8vIC0tLS0tLS0tLVxyXG4vLyBHZXQgYWxsIHRoZSBzcGFuIHJlc3VsdHMuXHJcbi8vIC0gJHNwYW46IDxtYXA+XHJcbkBmdW5jdGlvbiBzcGFuLW1hdGgoXHJcbiAgJHNwYW5cclxuKSB7XHJcbiAgJG5lc3QgICAgICAgICAgICAgOiBpZihzdXN5LWdldChyb2xlLCAkc3BhbikgPT0gbmVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICRzcGxpdC1uZXN0ICAgICAgIDogaWYoaXMtc3BsaXQoJHNwYW4pIGFuZCAkbmVzdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICRlZGdlICAgICAgICAgICAgIDogZ2V0LWVkZ2UoJHNwYW4pO1xyXG4gICRsb2NhdGlvbiAgICAgICAgIDogZ2V0LWxvY2F0aW9uKCRzcGFuKTtcclxuXHJcbiAgJGZsb2F0ICAgICAgICAgICAgOiBmcm9tO1xyXG4gICRwYWRkaW5nLWJlZm9yZSAgIDogbnVsbDtcclxuICAkcGFkZGluZy1hZnRlciAgICA6IG51bGw7XHJcbiAgJG1hcmdpbi1iZWZvcmUgICAgOiBudWxsO1xyXG4gICRtYXJnaW4tYWZ0ZXIgICAgIDogbnVsbDtcclxuXHJcbiAgLy8gY2FsY3VsYXRlIHdpZHRoc1xyXG4gICRzcHJlYWQ6IGluZGV4KG1hcC12YWx1ZXMoJHNwYW4pLCBzcHJlYWQpO1xyXG4gICRzcGFuOiBpZigkc3BsaXQtbmVzdCBhbmQgbm90KCRzcHJlYWQpLCBtYXAtbWVyZ2UoJHNwYW4sIChzcHJlYWQ6IHdpZGUpKSwgJHNwYW4pO1xyXG4gICR3aWR0aDogZ2V0LXNwYW4td2lkdGgoJHNwYW4pO1xyXG4gICRndXR0ZXJzOiBnZXQtZ3V0dGVycygkc3Bhbik7XHJcblxyXG4gIC8vIGFwcGx5IGd1dHRlcnNcclxuICBAaWYgaXMtaW5zaWRlKCRzcGFuKSB7XHJcbiAgICBAaWYgbm90KHN1c3ktZ2V0KHJvbGUsICRzcGFuKSkge1xyXG4gICAgICAkcGFkZGluZy1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSk7XHJcbiAgICAgICRwYWRkaW5nLWFmdGVyOiBtYXAtZ2V0KCRndXR0ZXJzLCBhZnRlcik7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAaWYgbm90KCRzcGxpdC1uZXN0KSB7XHJcbiAgICAgICRtYXJnaW4tYmVmb3JlOiBtYXAtZ2V0KCRndXR0ZXJzLCBiZWZvcmUpO1xyXG4gICAgICAkbWFyZ2luLWFmdGVyOiBtYXAtZ2V0KCRndXR0ZXJzLCBhZnRlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWFsIG1hcmdpbiBoYW5kbGluZ1xyXG4gIEBpZiBzdXN5LWdldChvdXRwdXQsICRzcGFuKSA9PSBpc29sYXRlIGFuZCAkbG9jYXRpb24ge1xyXG4gICAgJG1hcmdpbi1iZWZvcmU6IGdldC1pc29sYXRpb24oJHNwYW4pO1xyXG4gICAgJG1hcmdpbi1hZnRlcjogLTEwMCU7XHJcbiAgfSBAZWxzZSBpZiAkZWRnZSB7XHJcbiAgICAkaXMtc3BsaXQ6IGlzLXNwbGl0KCRzcGFuKTtcclxuICAgICRwb3M6IHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJHNwYW4pO1xyXG5cclxuICAgIEBpZiAkZWRnZSA9PSBsYXN0IHtcclxuICAgICAgJGZsb2F0OiBzdXN5LWdldChsYXN0LWZsb3csICRzcGFuKTtcclxuICAgIH1cclxuXHJcbiAgICBAaWYgbm90KCRpcy1zcGxpdCkge1xyXG4gICAgICBAaWYgJGVkZ2UgPT0gZnVsbCBvciAoJGVkZ2UgPT0gZmlyc3QgYW5kICRwb3MgPT0gYmVmb3JlKSB7XHJcbiAgICAgICAgJG1hcmdpbi1iZWZvcmU6IDA7XHJcbiAgICAgIH1cclxuICAgICAgQGlmICRlZGdlID09IGZ1bGwgb3IgKCRlZGdlID09IGxhc3QgYW5kICRwb3MgPT0gYWZ0ZXIpIHtcclxuICAgICAgICAkbWFyZ2luLWFmdGVyOiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAoXHJcbiAgICB3aWR0aCAgICAgICAgICAgOiAkd2lkdGgsXHJcbiAgICBmbG9hdCAgICAgICAgICAgOiAkZmxvYXQsXHJcbiAgICBtYXJnaW4tYmVmb3JlICAgOiAkbWFyZ2luLWJlZm9yZSxcclxuICAgIG1hcmdpbi1hZnRlciAgICA6ICRtYXJnaW4tYWZ0ZXIsXHJcbiAgICBwYWRkaW5nLWJlZm9yZSAgOiAkcGFkZGluZy1iZWZvcmUsXHJcbiAgICBwYWRkaW5nLWFmdGVyICAgOiAkcGFkZGluZy1hZnRlcixcclxuICAgIGZsb3cgICAgICAgICAgICA6IHN1c3ktZ2V0KGZsb3csICRzcGFuKSxcclxuICApO1xyXG59XHJcblxyXG4vLyBHZXQgU3BhbiBXaWR0aFxyXG4vLyAtLS0tLS0tLS0tLS0tLVxyXG4vLyBSZXR1cm4gc3BhbiB3aWR0aC5cclxuLy8gLSAkc3BhbjogPG1hcD5cclxuQGZ1bmN0aW9uIGdldC1zcGFuLXdpZHRoKFxyXG4gICRzcGFuXHJcbikge1xyXG4gICRzcGFuICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xyXG5cclxuICAkbiAgICAgICAgOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XHJcbiAgJGxvY2F0aW9uIDogZ2V0LWxvY2F0aW9uKCRzcGFuKTtcclxuICAkY29sdW1ucyAgOiBzdXN5LWdldChjb2x1bW5zLCAkc3Bhbik7XHJcbiAgJGd1dHRlcnMgIDogc3VzeS1nZXQoZ3V0dGVycywgJHNwYW4pO1xyXG4gICRzcHJlYWQgICA6IHN1c3ktZ2V0KHNwcmVhZCwgJHNwYW4pO1xyXG5cclxuICAkY29udGV4dCAgOiBudWxsO1xyXG4gICRzcGFuLXN1bSA6IG51bGw7XHJcbiAgJHdpZHRoICAgIDogbnVsbDtcclxuXHJcbiAgQGlmICRuID09ICdmdWxsJyB7XHJcbiAgICAkcG9zOiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKTtcclxuICAgICRyb2xlOiBzdXN5LWdldChyb2xlLCAkc3Bhbik7XHJcbiAgICAkbjogaWYoJHBvcyA9PSBzcGxpdCBhbmQgJHJvbGUgIT0gbmVzdCwgc3VzeS1jb3VudCgkY29sdW1ucyksIDEwMCUpO1xyXG4gIH1cclxuXHJcbiAgQGlmIHR5cGUtb2YoJG4pICE9IG51bWJlciB7XHJcbiAgICBAd2FybiBcIigje3R5cGUtb2YoJG4pfSkgI3skbn0gaXMgbm90IGEgdmFsaWQgc3Bhbi5cIjtcclxuICB9IEBlbHNlIGlmIHVuaXRsZXNzKCRuKSB7XHJcbiAgICAkY29udGV4dDogc3VzeS1zdW0oJGNvbHVtbnMsICRndXR0ZXJzLCBpZihpcy1zcGxpdCgkc3BhbiksIHdpZGUsIG5hcnJvdykpO1xyXG4gICAgJHNwcmVhZDogaWYoaXMtaW5zaWRlKCRzcGFuKSwgJHNwcmVhZCBvciB3aWRlLCAkc3ByZWFkKTtcclxuICAgICRzcGFuLXN1bTogc3VzeSgkbiwgJGxvY2F0aW9uLCAkY29sdW1ucywgJGd1dHRlcnMsICRzcHJlYWQpO1xyXG5cclxuICAgICRfbWF0aDogc3VzeS1nZXQobWF0aCwgJHNwYW4pO1xyXG4gICAgJF9jb2x1bW4td2lkdGg6IHN1c3ktZ2V0KGNvbHVtbi13aWR0aCwgJHNwYW4pO1xyXG4gICAgQGlmICRfbWF0aCA9PSBzdGF0aWMge1xyXG4gICAgICAkd2lkdGg6ICRzcGFuLXN1bSAqIHZhbGlkLWNvbHVtbi1tYXRoKCRfbWF0aCwgJF9jb2x1bW4td2lkdGgpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICR3aWR0aDogcGVyY2VudGFnZSgkc3Bhbi1zdW0gLyAkY29udGV4dCk7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkd2lkdGg6ICRuO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkd2lkdGg7XHJcbn1cclxuIiwiLy8gR3V0dGVyIFN5bnRheFxyXG4vLyA9PT09PT09PT09PT09XHJcblxyXG5cclxuLy8gR3V0dGVyc1xyXG4vLyAtLS0tLS0tXHJcbi8vIFNldCBndXR0ZXJzIG9uIGFuIGVsZW1lbnQuXHJcbi8vIC0gWyRzcGFuXSAgIDogPHNldHRpbmdzPlxyXG5AbWl4aW4gZ3V0dGVycyhcclxuICAkc3BhbjogJHN1c3lcclxuKSB7XHJcbiAgJGluc3BlY3QgIDogJHNwYW47XHJcbiAgJHNwYW4gICAgIDogcGFyc2UtZ3V0dGVycygkc3Bhbik7XHJcbiAgJF9ndXR0ZXJzIDogZ2V0LWd1dHRlcnMoJHNwYW4pO1xyXG5cclxuICAkX291dHB1dDogKFxyXG4gICAgYmVmb3JlOiBtYXAtZ2V0KCRfZ3V0dGVycywgYmVmb3JlKSxcclxuICAgIGFmdGVyOiBtYXAtZ2V0KCRfZ3V0dGVycywgYWZ0ZXIpLFxyXG4gICAgZmxvdzogc3VzeS1nZXQoZmxvdywgJHNwYW4pLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChndXR0ZXJzLCAkaW5zcGVjdCk7XHJcblxyXG4gIEBpZiBpcy1pbnNpZGUoJHNwYW4pIHtcclxuICAgIEBpbmNsdWRlIHBhZGRpbmctb3V0cHV0KCRfb3V0cHV0Li4uKTtcclxuICB9IEBlbHNlIHtcclxuICAgIEBpbmNsdWRlIG1hcmdpbi1vdXRwdXQoJF9vdXRwdXQuLi4pO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGd1dHRlcihcclxuICAkc3BhbjogJHN1c3lcclxuKSB7XHJcbiAgQGluY2x1ZGUgZ3V0dGVycygkc3Bhbik7XHJcbn1cclxuXHJcblxyXG4vLyBHdXR0ZXJcclxuLy8gLS0tLS0tXHJcbi8vIFJldHVybiB0aGUgd2lkdGggb2YgYSBndXR0ZXIuXHJcbi8vIC0gWyRzcGFuXSAgIDogPHNldHRpbmdzPlxyXG5AZnVuY3Rpb24gZ3V0dGVyKFxyXG4gICRzcGFuOiAkc3VzeVxyXG4pIHtcclxuICAkc3BhbjogcGFyc2UtZ3V0dGVycygkc3Bhbik7XHJcblxyXG4gICRfZ3V0dGVyczogZ2V0LWd1dHRlcnMoJHNwYW4pO1xyXG4gICRfZ3V0dGVyczogbWFwLWdldCgkX2d1dHRlcnMsIGJlZm9yZSkgb3IgbWFwLWdldCgkX2d1dHRlcnMsIGFmdGVyKTtcclxuXHJcbiAgQHJldHVybiAkX2d1dHRlcnM7XHJcbn1cclxuXHJcbkBmdW5jdGlvbiBndXR0ZXJzKFxyXG4gICRzcGFuOiAkc3VzeVxyXG4pIHtcclxuICBAcmV0dXJuIGd1dHRlcigkc3Bhbik7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgR3V0dGVyIFdpZHRoXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS1cclxuLy8gUmV0dXJuIGd1dHRlciB3aWR0aC5cclxuLy8gLSBbJGNvbnRleHRdOiA8Y29udGV4dD5cclxuQGZ1bmN0aW9uIGdldC1ndXR0ZXItd2lkdGgoXHJcbiAgJGNvbnRleHQ6ICRzdXN5XHJcbikge1xyXG4gICRjb250ZXh0ICA6IHBhcnNlLWd1dHRlcnMoJGNvbnRleHQpO1xyXG5cclxuICAkX2d1dHRlcnMgOiBzdXN5LWdldChndXR0ZXJzLCAkY29udGV4dCk7XHJcbiAgJF9ndXR0ZXIgIDogc3VzeS1nZXQoZ3V0dGVyLW92ZXJyaWRlLCAkY29udGV4dCk7XHJcblxyXG4gIEBpZiAkX2d1dHRlcnMgYW5kICgkX2d1dHRlcnMgPiAwKSBhbmQgbm90KCRfZ3V0dGVyKSB7XHJcbiAgICAkX2NvbHVtbi13aWR0aDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkY29udGV4dCk7XHJcbiAgICAkX21hdGg6IGd1dHRlci1tYXRoKCRjb250ZXh0KTtcclxuICAgIEBpZiAkX21hdGggPT0gc3RhdGljIHtcclxuICAgICAgJF9ndXR0ZXI6ICRfZ3V0dGVycyAqIHZhbGlkLWNvbHVtbi1tYXRoKCRfbWF0aCwgJF9jb2x1bW4td2lkdGgpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRfY29sdW1ucyA6IHN1c3ktZ2V0KGNvbHVtbnMsICRjb250ZXh0KTtcclxuICAgICAgJF9zcHJlYWQgIDogaWYoaXMtc3BsaXQoJGNvbnRleHQpLCB3aWRlLCBzdXN5LWdldChzcHJlYWQsICRjb250ZXh0KSk7XHJcbiAgICAgICRfZ3V0dGVyICA6IHBlcmNlbnRhZ2UoJF9ndXR0ZXJzIC8gc3VzeS1zdW0oJF9jb2x1bW5zLCAkX2d1dHRlcnMsICRfc3ByZWFkKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAkX2d1dHRlcjogaWYoJF9ndXR0ZXIgPT0gJ25vLWd1dHRlcnMnIG9yICRfZ3V0dGVyID09ICduby1ndXR0ZXInLCBudWxsLCAkX2d1dHRlcik7XHJcblxyXG4gIEByZXR1cm4gJF9ndXR0ZXI7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgR3V0dGVyc1xyXG4vLyAtLS0tLS0tLS0tLVxyXG4vLyBSZXR1cm4gYmVmb3JlIGFuZCBhZnRlciBndXR0ZXIgdmFsdWVzLlxyXG4vLyAtIFskY29udGV4dF06IDxjb250ZXh0PlxyXG5AZnVuY3Rpb24gZ2V0LWd1dHRlcnMoXHJcbiAgJGNvbnRleHQ6ICRzdXN5XHJcbikge1xyXG4gICRjb250ZXh0ICAgICAgICAgICAgOiBwYXJzZS1ndXR0ZXJzKCRjb250ZXh0KTtcclxuXHJcbiAgJF9ndXR0ZXItcG9zaXRpb24gICA6IHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGNvbnRleHQpO1xyXG4gICRfZ3V0dGVyICAgICAgICAgICAgOiBnZXQtZ3V0dGVyLXdpZHRoKCRjb250ZXh0KTtcclxuXHJcbiAgJF9yZXR1cm4gICAgICAgICAgICA6IChiZWZvcmU6IG51bGwsIGFmdGVyOiBudWxsKTtcclxuXHJcbiAgQGlmIGlzLXNwbGl0KCRjb250ZXh0KSBhbmQgJF9ndXR0ZXIge1xyXG4gICAgJF9ndXR0ZXI6ICRfZ3V0dGVyIC8gMjtcclxuICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIChiZWZvcmU6ICRfZ3V0dGVyLCBhZnRlcjogJF9ndXR0ZXIpKTtcclxuICB9IEBlbHNlIHtcclxuICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sICgkX2d1dHRlci1wb3NpdGlvbjogJF9ndXR0ZXIpKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcblxyXG4vLyBJcyBJbnNpZGVcclxuLy8gLS0tLS0tLS0tXHJcbi8vIFJldHVybnMgdHJ1ZSBpZiBndXR0ZXJzIGFyZSBpbnNpZGUuXHJcbi8vICRjb250ZXh0OiA8Y29udGV4dD5cclxuQGZ1bmN0aW9uIGlzLWluc2lkZShcclxuICAkY29udGV4dFxyXG4pIHtcclxuICAkX2luc2lkZTogaW5zaWRlIGluc2lkZS1zdGF0aWM7XHJcbiAgJF9ndXR0ZXItcG9zaXRpb246IHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGNvbnRleHQpO1xyXG5cclxuICBAcmV0dXJuIGlmKGluZGV4KCRfaW5zaWRlLCAkX2d1dHRlci1wb3NpdGlvbiksIHRydWUsIGZhbHNlKTtcclxufVxyXG5cclxuXHJcbi8vIElzIFNwbGl0XHJcbi8vIC0tLS0tLS0tXHJcbi8vIFJldHVybnMgdHJ1ZSBpZiBndXR0ZXJzIGFyZSBzcGxpdC5cclxuLy8gJGNvbnRleHQ6IDxjb250ZXh0PlxyXG5AZnVuY3Rpb24gaXMtc3BsaXQoXHJcbiAgJGNvbnRleHRcclxuKSB7XHJcbiAgJF9zcGxpdDogc3BsaXQgaW5zaWRlIGluc2lkZS1zdGF0aWM7XHJcbiAgJF9ndXR0ZXItcG9zaXRpb246IHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGNvbnRleHQpO1xyXG5cclxuICBAcmV0dXJuIGlmKGluZGV4KCRfc3BsaXQsICRfZ3V0dGVyLXBvc2l0aW9uKSwgdHJ1ZSwgZmFsc2UpO1xyXG59XHJcblxyXG5cclxuLy8gR3V0dGVyIE1hdGhcclxuLy8gLS0tLS0tLS0tLS1cclxuLy8gUmV0dXJuIHRoZSBtYXRoIHRvIHVzZSBmb3IgZ3V0dGVyIGNhbGN1bGF0aW9uc1xyXG4vLyAkY29udGV4dDogPGNvbnRleHQ+XHJcbkBmdW5jdGlvbiBndXR0ZXItbWF0aChcclxuICAkY29udGV4dDogJHN1c3lcclxuKSB7XHJcbiAgJF9yZXR1cm4gIDogc3VzeS1nZXQobWF0aCwgJGNvbnRleHQpO1xyXG4gICRfcmV0dXJuICA6IGlmKHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGNvbnRleHQpID09IGluc2lkZS1zdGF0aWMsIHN0YXRpYywgJF9yZXR1cm4pO1xyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcbiIsIi8vIElzb2xhdGlvbiBTeW50YXhcclxuLy8gPT09PT09PT09PT09PT09PVxyXG5cclxuXHJcbi8vIElzb2xhdGUgW01peGluXVxyXG4vLyAtLS0tLS0tLS0tLS0tLS1cclxuLy8gU2V0IGlzb2xhdGlvbiBhcyBhbiBvdmVycmlkZS5cclxuLy8gLSAkbG9jYXRpb246IDxzcGFuPlxyXG5AbWl4aW4gaXNvbGF0ZShcclxuICAkaXNvbGF0ZTogMVxyXG4pIHtcclxuICAkaW5zcGVjdDogJGlzb2xhdGU7XHJcblxyXG4gICRvdXRwdXQ6IChcclxuICAgIHB1c2g6IGlzb2xhdGUoJGlzb2xhdGUpLFxyXG4gICAgZmxvdzogc3VzeS1nZXQoZmxvdywgJGlzb2xhdGUpLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChpc29sYXRlLCAkaW5zcGVjdCk7XHJcbiAgQGluY2x1ZGUgaXNvbGF0ZS1vdXRwdXQoJG91dHB1dC4uLik7XHJcbn1cclxuXHJcblxyXG4vLyBJc29sYXRlIFtmdW5jdGlvbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFJldHVybiBhbiBpc29sYXRpb24gb2Zmc2V0IHdpZHRoLlxyXG4vLyAtICRsb2NhdGlvbjogPHNwYW4+XHJcbkBmdW5jdGlvbiBpc29sYXRlKFxyXG4gICRpc29sYXRlOiAxXHJcbikge1xyXG4gICRpc29sYXRlOiBwYXJzZS1zcGFuKCRpc29sYXRlKTtcclxuICAkaXNvbGF0aW9uOiBzdXN5LWdldChzcGFuLCAkaXNvbGF0ZSk7XHJcblxyXG4gIEBpZiAkaXNvbGF0aW9uIGFuZCBub3QoZ2V0LWxvY2F0aW9uKCRpc29sYXRlKSkge1xyXG4gICAgJG5ldzogKFxyXG4gICAgICBzcGFuOiBudWxsLFxyXG4gICAgICBsb2NhdGlvbjogJGlzb2xhdGlvbixcclxuICAgICk7XHJcbiAgICAkaXNvbGF0ZTogbWFwLW1lcmdlKCRpc29sYXRlLCAkbmV3KTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gZ2V0LWlzb2xhdGlvbigkaXNvbGF0ZSk7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgSXNvbGF0aW9uXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gUmV0dXJuIHRoZSBpc29sYXRpb24gb2Zmc2V0IHdpZHRoXHJcbi8vIC0gJGlucHV0OiA8bWFwPlxyXG5AZnVuY3Rpb24gZ2V0LWlzb2xhdGlvbihcclxuICAkaW5wdXRcclxuKSB7XHJcbiAgJGxvY2F0aW9uICAgOiBnZXQtbG9jYXRpb24oJGlucHV0KTtcclxuICAkY29sdW1ucyAgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRpbnB1dCk7XHJcbiAgJHdpZHRoICAgICAgOiBudWxsO1xyXG5cclxuICBAaWYgdHlwZS1vZigkbG9jYXRpb24pID09IG51bWJlciBhbmQgbm90KHVuaXRsZXNzKCRsb2NhdGlvbikpIHtcclxuICAgICR3aWR0aDogJGxvY2F0aW9uO1xyXG4gIH0gQGVsc2UgaWYgJGxvY2F0aW9uIHtcclxuICAgICRwdXNoOiAkbG9jYXRpb24gLSAxO1xyXG4gICAgQGlmICRwdXNoID4gMCB7XHJcbiAgICAgICRwdXNoOiBtYXAtbWVyZ2UoJGlucHV0LCAoXHJcbiAgICAgICAgc3BhbjogJHB1c2gsXHJcbiAgICAgICAgbG9jYXRpb246IDEsXHJcbiAgICAgICAgc3ByZWFkOiB3aWRlLFxyXG4gICAgICApKTtcclxuICAgICAgJHdpZHRoOiBnZXQtc3Bhbi13aWR0aCgkcHVzaCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAaWYgc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkaW5wdXQpID09IHNwbGl0XHJcbiAgICAgIGFuZCBzdXN5LWdldChndXR0ZXJzLCAkaW5wdXQpID4gMCB7XHJcbiAgICAkd2lkdGg6IGlmKCR3aWR0aCA9PSBudWxsLCBndXR0ZXJzKCRpbnB1dCksICR3aWR0aCArIGd1dHRlcnMoJGlucHV0KSk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICR3aWR0aCBvciAwO1xyXG59XHJcbiIsIi8vIEdhbGxlcnkgU3ludGF4XHJcbi8vID09PT09PT09PT09PT09XHJcblxyXG4vLyBHYWxsZXJ5XHJcbi8vIC0tLS0tLS1cclxuLy8gQ3JlYXRlIGFuIGlzb2xhdGVkIGdhbGxlcnlcclxuLy8gLSAkc3BhbiAgICAgICAgOiA8c3Bhbj5cclxuLy8gLSBbJHNlbGVjdG9yXSAgOiBjaGlsZCB8IG9mLXR5cGVcclxuQG1peGluIGdhbGxlcnkoXHJcbiAgJHNwYW4sXHJcbiAgJHNlbGVjdG9yOiBjaGlsZFxyXG4pIHtcclxuICAkaW5zcGVjdCAgICA6ICRzcGFuO1xyXG4gICRzcGFuICAgICAgIDogcGFyc2Utc3Bhbigkc3Bhbik7XHJcbiAgJHNwYW4gICAgICAgOiBtYXAtbWVyZ2UoJHNwYW4sIChsb2NhdGlvbjogMSkpO1xyXG5cclxuICAkbiAgICAgICAgICAgIDogc3VzeS1nZXQoc3BhbiwgJHNwYW4pO1xyXG4gICRjb2x1bW5zICAgICAgOiBzdXN5LWdldChjb2x1bW5zLCAkc3Bhbik7XHJcbiAgJGNvbnRleHQgICAgICA6IHN1c3ktY291bnQoJGNvbHVtbnMpO1xyXG4gICRmbG93ICAgICAgICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XHJcblxyXG4gICRpbnNpZGUgICAgICAgOiBpcy1pbnNpZGUoJHNwYW4pO1xyXG4gICRmcm9tICAgICAgICAgOiBmcm9tKCRmbG93KTtcclxuICAkbGluZSAgICAgICAgIDogZmxvb3IoJGNvbnRleHQgLyAkbik7XHJcbiAgJHN5bW1ldHJpY2FsICA6IGlzLXN5bW1ldHJpY2FsKCRjb2x1bW5zKTtcclxuXHJcbiAgJG91dHB1dDogKFxyXG4gICAgd2lkdGggICAgICAgICAgICAgOiBudWxsLFxyXG4gICAgZmxvYXQgICAgICAgICAgICAgOiBmcm9tLFxyXG4gICAgbWFyZ2luLWJlZm9yZSAgICAgOiBudWxsLFxyXG4gICAgbWFyZ2luLWFmdGVyICAgICAgOiBudWxsLFxyXG4gICAgcGFkZGluZy1iZWZvcmUgICAgOiBudWxsLFxyXG4gICAgcGFkZGluZy1hZnRlciAgICAgOiBudWxsLFxyXG4gICAgZmxvdyAgICAgICAgICAgICAgOiAkZmxvdyxcclxuICApO1xyXG5cclxuICBAaWYgJGluc2lkZSB7XHJcbiAgICAkZ3V0dGVyczogZ2V0LWd1dHRlcnMoJHNwYW4pO1xyXG4gICAgJG91dHB1dDogbWFwLW1lcmdlKCRvdXRwdXQsIChcclxuICAgICAgcGFkZGluZy1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSksXHJcbiAgICAgIHBhZGRpbmctYWZ0ZXI6IG1hcC1nZXQoJGd1dHRlcnMsIGFmdGVyKSxcclxuICAgICkpO1xyXG4gIH1cclxuXHJcbiAgQGlmICRzeW1tZXRyaWNhbCB7XHJcbiAgICAkb3V0cHV0OiBtYXAtbWVyZ2UoJG91dHB1dCwgKHdpZHRoOiBnZXQtc3Bhbi13aWR0aCgkc3BhbikpKTtcclxuICB9XHJcblxyXG4gICRib3ggICAgICAgICAgOiBzdXN5LWdldChib3gtc2l6aW5nLCAkc3Bhbik7XHJcbiAgJGdsb2JhbC1ib3ggICA6IGlmKHN1c3ktZ2V0KGdsb2JhbC1ib3gtc2l6aW5nKSA9PSAnYm9yZGVyLWJveCcsIHRydWUsIGZhbHNlKTtcclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGdhbGxlcnksICRpbnNwZWN0KTtcclxuXHJcbiAgLy8gQ29sbGVjdGl2ZSBPdXRwdXRcclxuICBAaWYgJGJveCA9PSBib3JkZXItYm94IG9yICgkaW5zaWRlIGFuZCBub3QoJGJveCkgYW5kIG5vdCgkZ2xvYmFsLWJveCkpIHtcclxuICAgIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogYm9yZGVyLWJveCkpO1xyXG4gIH0gQGVsc2UgaWYgJGJveCA9PSBjb250ZW50LWJveCB7XHJcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6IGNvbnRlbnQtYm94KSk7XHJcbiAgfVxyXG5cclxuICBAaW5jbHVkZSBmbG9hdC1zcGFuLW91dHB1dCgkb3V0cHV0Li4uKTtcclxuXHJcbiAgLy8gSW5kaXZpZHVhbCBMb29wXHJcbiAgQGZvciAkaXRlbSBmcm9tIDEgdGhyb3VnaCAkbGluZSB7XHJcbiAgICAkbnRoOiAnI3skbGluZX1uICsgI3skaXRlbX0nO1xyXG4gICAgJjpudGgtI3skc2VsZWN0b3J9KCN7JG50aH0pIHtcclxuICAgICAgLy8gSW5kaXZpZHVhbCBQcmVwXHJcbiAgICAgICRvdXRwdXQ6IChcclxuICAgICAgICB3aWR0aCAgICAgICAgICAgICA6IGlmKCRzeW1tZXRyaWNhbCwgbnVsbCwgZ2V0LXNwYW4td2lkdGgoJHNwYW4pKSxcclxuICAgICAgICBmbG9hdCAgICAgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgbWFyZ2luLWJlZm9yZSAgICAgOiBnZXQtaXNvbGF0aW9uKCRzcGFuKSxcclxuICAgICAgICBtYXJnaW4tYWZ0ZXIgICAgICA6IC0xMDAlLFxyXG4gICAgICAgIHBhZGRpbmctYmVmb3JlICAgIDogbnVsbCxcclxuICAgICAgICBwYWRkaW5nLWFmdGVyICAgICA6IG51bGwsXHJcbiAgICAgICAgZmxvdyAgICAgICAgICAgICAgOiAkZmxvdyxcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIEluZGl2aWR1YWwgT3V0cHV0XHJcbiAgICAgIEBpbmNsdWRlIGZsb2F0LXNwYW4tb3V0cHV0KCRvdXRwdXQuLi4pO1xyXG5cclxuICAgICAgQGlmIGdldC1lZGdlKCRzcGFuKSA9PSBmaXJzdCB7XHJcbiAgICAgICAgQGluY2x1ZGUgYnJlYWs7XHJcbiAgICAgICAgQGluY2x1ZGUgZmlyc3QoJHNwYW4pO1xyXG4gICAgICB9IEBlbHNlIHtcclxuICAgICAgICBAaW5jbHVkZSBub2JyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJbmRpdmlkdWFsIExvY2F0aW9uIEluY3JlbWVudFxyXG4gICAgICAkbG9jYXRpb246IGdldC1sb2NhdGlvbigkc3BhbikgKyAkbjtcclxuICAgICAgJGxvY2F0aW9uOiBpZigkbG9jYXRpb24gPiAkY29udGV4dCwgMSwgJGxvY2F0aW9uKTtcclxuICAgICAgJHNwYW46IG1hcC1tZXJnZSgkc3BhbiwgKGxvY2F0aW9uOiAkbG9jYXRpb24pKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gUm93IFN0YXJ0ICYgRW5kXHJcbi8vID09PT09PT09PT09PT09PVxyXG5cclxuLy8gQnJlYWtcclxuLy8gLS0tLS1cclxuLy8gQXBwbHkgdG8gYW55IGVsZW1lbnQgdGhhdCBzaG91bGQgZm9yY2UgYSBsaW5lIGJyZWFrLlxyXG5AbWl4aW4gYnJlYWsge1xyXG4gIEBpbmNsdWRlIG91dHB1dCgoY2xlYXI6IGJvdGgpKTtcclxufVxyXG5cclxuXHJcbi8vIE5vQnJlYWtcclxuLy8gLS0tLS0tLVxyXG4vLyBDYW5jZWwgdGhlIGJyZWFrKCkgZWZmZWN0LCBlLmcuIHdoZW4gdXNpbmcgbWVkaWEgcXVlcmllcy5cclxuQG1peGluIG5vYnJlYWsge1xyXG4gIEBpbmNsdWRlIG91dHB1dCgoY2xlYXI6IG5vbmUpKTtcclxufVxyXG5cclxuXHJcbi8vIEZ1bGxcclxuLy8gLS0tLVxyXG4vLyAtIFskY29udGV4dF06IDxsYXlvdXQgc2hvcnRoYW5kPlxyXG5AbWl4aW4gZnVsbChcclxuICAkY29udGV4dDogJHN1c3lcclxuKSB7XHJcbiAgJGluc3BlY3QgOiAkY29udGV4dDtcclxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoZnVsbCwgJGluc3BlY3QpO1xyXG4gIEBpbmNsdWRlIHNwYW4oZnVsbCBvZiBwYXJzZS1ncmlkKCRjb250ZXh0KSBicmVhayk7XHJcbn1cclxuXHJcblxyXG4vLyBGaXJzdFxyXG4vLyAtLS0tLVxyXG4vLyAtIFskY29udGV4dF06IDxzZXR0aW5ncz5cclxuQG1peGluIGZpcnN0KFxyXG4gICRjb250ZXh0OiAkc3VzeVxyXG4pIHtcclxuICAkaW5zcGVjdCAgOiAkY29udGV4dDtcclxuICAkY29udGV4dCAgOiBwYXJzZS1ncmlkKCRjb250ZXh0KTtcclxuICAkZmxvdyAgICAgOiBzdXN5LWdldChmbG93LCAkY29udGV4dCk7XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChmaXJzdCwgJGluc3BlY3QpO1xyXG4gIEBpZiBub3QoaXMtc3BsaXQoJGNvbnRleHQpKSB7XHJcbiAgICBAaW5jbHVkZSBmbG9hdC1maXJzdCgkZmxvdyk7XHJcbiAgfVxyXG59XHJcblxyXG5AbWl4aW4gYWxwaGEoXHJcbiAgJGNvbnRleHQ6ICRzdXN5XHJcbikge1xyXG4gIEBpbmNsdWRlIGZpcnN0KCRjb250ZXh0KTtcclxufVxyXG5cclxuXHJcbi8vIExhc3RcclxuLy8gLS0tLVxyXG4vLyAtIFskY29udGV4dF06IDxzZXR0aW5ncz5cclxuQG1peGluIGxhc3QoXHJcbiAgJGNvbnRleHQ6ICRzdXN5XHJcbikge1xyXG4gICRpbnNwZWN0ICA6ICRjb250ZXh0O1xyXG4gICRjb250ZXh0ICA6IHBhcnNlLWdyaWQoJGNvbnRleHQpO1xyXG5cclxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QobGFzdCwgJGluc3BlY3QpO1xyXG5cclxuICAkb3V0cHV0OiAoXHJcbiAgICBmbG93OiBzdXN5LWdldChmbG93LCAkY29udGV4dCksXHJcbiAgICBsYXN0LWZsb3c6IHN1c3ktZ2V0KGxhc3QtZmxvdywgJGNvbnRleHQpLFxyXG4gICAgbWFyZ2luOiBpZihpcy1zcGxpdCgkY29udGV4dCksIG51bGwsIDApLFxyXG4gICk7XHJcblxyXG4gIEBpbmNsdWRlIGZsb2F0LWxhc3QoJG91dHB1dC4uLik7XHJcbn1cclxuXHJcbkBtaXhpbiBvbWVnYShcclxuICAkY29udGV4dDogJHN1c3lcclxuKSB7XHJcbiAgQGluY2x1ZGUgbGFzdCgkY29udGV4dCk7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgRWRnZVxyXG4vLyAtLS0tLS0tLVxyXG4vLyBDYWxjdWxhdGUgZWRnZSB2YWx1ZSBiYXNlZCBvbiBsb2NhdGlvbiwgaWYgcG9zc2libGVcclxuQGZ1bmN0aW9uIGdldC1lZGdlKFxyXG4gICRzcGFuXHJcbikge1xyXG4gICRzcGFuICAgICAgIDogcGFyc2Utc3Bhbigkc3Bhbik7XHJcbiAgJGVkZ2UgICAgICAgOiBzdXN5LWdldChlZGdlLCAkc3Bhbik7XHJcblxyXG4gIEBpZiBub3QoJGVkZ2UpIHtcclxuICAgICRjb3VudDogc3VzeS1jb3VudChzdXN5LWdldChjb2x1bW5zLCAkc3BhbikpO1xyXG4gICAgJGxvY2F0aW9uOiBzdXN5LWdldChsb2NhdGlvbiwgJHNwYW4pO1xyXG4gICAgJG46IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcclxuXHJcbiAgICAkbnVtYmVyOiBpZih0eXBlLW9mKCRsb2NhdGlvbikgPT0gbnVtYmVyLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAkaW5kZXg6IGlmKCRudW1iZXIgYW5kIHVuaXRsZXNzKCRsb2NhdGlvbiksIHRydWUsIGZhbHNlKTtcclxuXHJcbiAgICBAaWYgJG4gPT0gJGNvdW50IHtcclxuICAgICAgJGVkZ2U6IGZ1bGw7XHJcbiAgICB9IEBlbHNlIGlmICRsb2NhdGlvbiBhbmQgJG4gYW5kICRpbmRleCB7XHJcbiAgICAgIEBpZiAkbG9jYXRpb24gPT0gMSB7XHJcbiAgICAgICAgJGVkZ2U6IGlmKCRuID09ICRjb3VudCwgZnVsbCwgZmlyc3QpO1xyXG4gICAgICB9IEBlbHNlIGlmICRsb2NhdGlvbiArICRuIC0gMSA9PSAkY291bnQge1xyXG4gICAgICAgICRlZGdlOiBsYXN0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAaWYgJGVkZ2UgPT0gYWxwaGEgb3IgJGVkZ2UgPT0gb21lZ2Ege1xyXG4gICAgJGVkZ2U6IGlmKCRlZGdlID09IGFscGhhLCBmaXJzdCwgbGFzdCk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRlZGdlO1xyXG59XHJcblxyXG5cclxuLy8gR2V0IExvY2F0aW9uXHJcbi8vIC0tLS0tLS0tLS0tLVxyXG4vLyBDYWxjdWxhdGUgbG9jYXRpb24gdmFsdWUgYmFzZWQgb24gZWRnZSwgaWYgcG9zc2libGVcclxuQGZ1bmN0aW9uIGdldC1sb2NhdGlvbihcclxuICAkc3BhblxyXG4pIHtcclxuICAkc3BhbiAgICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xyXG4gICRsb2NhdGlvbiAgIDogc3VzeS1nZXQobG9jYXRpb24sICRzcGFuKTtcclxuICAkZWRnZSAgICAgICA6IGdldC1lZGdlKCRzcGFuKTtcclxuICAkbiAgICAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcclxuXHJcbiAgQGlmICRlZGdlIGFuZCBub3QoJGxvY2F0aW9uKSBhbmQgdHlwZS1vZigkbikgPT0gbnVtYmVyIGFuZCB1bml0bGVzcygkbikge1xyXG4gICAgQGlmICRlZGdlID09IGZpcnN0IHtcclxuICAgICAgJGxvY2F0aW9uOiAxO1xyXG4gICAgfSBAZWxzZSBpZiAkZWRnZSA9PSBsYXN0IHtcclxuICAgICAgJGxvY2F0aW9uOiBzdXN5LWNvdW50KHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKSkgLSAkbiArIDE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRsb2NhdGlvblxyXG59XHJcbiIsIi8vIE1hcmdpbiBTeW50YXhcclxuLy8gPT09PT09PT09PT09PVxyXG5cclxuLy8gUHJlXHJcbi8vIC0tLVxyXG4vLyBBZGQgc3Bhbm5pbmctbWFyZ2lucyBiZWZvcmUgYW4gZWxlbWVudC5cclxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cclxuQG1peGluIHByZShcclxuICAkc3BhblxyXG4pIHtcclxuICAkaW5zcGVjdDogJHNwYW47XHJcbiAgJHNwYW4gICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xyXG4gICRmbG93ICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XHJcbiAgJHNwbGl0ICA6IGlmKHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJHNwYW4pID09IHNwbGl0LCB0cnVlLCBmYWxzZSk7XHJcbiAgJGd1dHRlciA6IGd1dHRlcigkc3Bhbik7XHJcbiAgJHNwYW4gICA6IHNwYW4oJHNwYW4pO1xyXG4gICR3aWR0aCAgOiBpZigkc3BsaXQgYW5kICRndXR0ZXIsICRzcGFuICsgJGd1dHRlciwgJHNwYW4pO1xyXG5cclxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QocHJlLCAkaW5zcGVjdCk7XHJcbiAgQGluY2x1ZGUgbWFyZ2luLW91dHB1dCgkd2lkdGgsIG51bGwsICRmbG93KTtcclxufVxyXG5cclxuLy8gUG9zdFxyXG4vLyAtLS0tXHJcbi8vIEFkZCBzcGFubmluZy1tYXJnaW5zIGFmdGVyIGFuIGVsZW1lbnQuXHJcbi8vIC0gJHNwYW4gIDogPHNwYW4+XHJcbkBtaXhpbiBwb3N0KFxyXG4gICRzcGFuXHJcbikge1xyXG4gICRpbnNwZWN0ICA6ICRzcGFuO1xyXG4gICRzcGFuICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xyXG4gICRmbG93ICAgICA6IHN1c3ktZ2V0KGZsb3csICRzcGFuKTtcclxuICAkc3BsaXQgICAgOiBpZihzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKSA9PSBzcGxpdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICR3aWR0aCAgICA6IGlmKCRzcGxpdCwgc3Bhbigkc3BhbikgKyBndXR0ZXIoJHNwYW4pLCBzcGFuKCRzcGFuKSk7XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChwb3N0LCAkaW5zcGVjdCk7XHJcbiAgQGluY2x1ZGUgbWFyZ2luLW91dHB1dChudWxsLCAkd2lkdGgsICRmbG93KTtcclxufVxyXG5cclxuLy8gUHVzaFxyXG4vLyAtLS0tXHJcbi8vIFNpbXBsZSBzeW5vbnltbiBmb3IgcHJlLlxyXG4vLyAtICRzcGFuICA6IDxzcGFuPlxyXG5AbWl4aW4gcHVzaChcclxuICAkc3BhblxyXG4pIHtcclxuICBAaW5jbHVkZSBwcmUoJHNwYW4pO1xyXG59XHJcblxyXG4vLyBQdWxsXHJcbi8vIC0tLS1cclxuLy8gQWRkIG5lZ2F0aXZlIHNwYW5uaW5nLW1hcmdpbnMgYmVmb3JlIGFuIGVsZW1lbnQuXHJcbi8vIC0gJHNwYW4gIDogPHNwYW4+XHJcbkBtaXhpbiBwdWxsKFxyXG4gICRzcGFuXHJcbikge1xyXG4gICRpbnNwZWN0ICA6ICRzcGFuO1xyXG4gICRzcGFuICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xyXG4gICRmbG93ICAgICA6IHN1c3ktZ2V0KGZsb3csICRzcGFuKTtcclxuICAkc3BsaXQgICAgOiBpZihzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKSA9PSBzcGxpdCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICR3aWR0aCAgICA6IGlmKCRzcGxpdCwgMCAtIHNwYW4oJHNwYW4pICsgZ3V0dGVyKCRzcGFuKSwgMCAtIHNwYW4oJHNwYW4pKTtcclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHB1bGwsICRpbnNwZWN0KTtcclxuICBAaW5jbHVkZSBtYXJnaW4tb3V0cHV0KCR3aWR0aCwgbnVsbCwgJGZsb3cpO1xyXG59XHJcblxyXG4vLyBTcXVpc2hcclxuLy8gLS0tLS0tXHJcbi8vIEFkZCBzcGFubmluZy1tYXJnaW5zIGJlZm9yZSBhbmQgYWZ0ZXIgYW4gZWxlbWVudC5cclxuLy8gLSAkcHJlICAgICA6IDxzcGFuPlxyXG4vLyAtIFskcG9zdF0gIDogPHNwYW4+XHJcbkBtaXhpbiBzcXVpc2goXHJcbiAgJHByZSxcclxuICAkcG9zdDogZmFsc2VcclxuKSB7XHJcbiAgJGluc3BlY3QgICAgICA6ICRwcmUsICRwb3N0O1xyXG4gICRwcmUgICAgICAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHByZSkpO1xyXG5cclxuICBAaWYgJHBvc3Qge1xyXG4gICAgJHBvc3Q6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3BhbigkcG9zdCkpO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJHNwYW46IHN1c3ktZ2V0KHNwYW4sICRwcmUpO1xyXG4gICAgQGlmIGxlbmd0aCgkc3BhbikgPiAxIHtcclxuICAgICAgJHByZTogbWFwLW1lcmdlKCRwcmUsIChzcGFuOiBudGgoJHNwYW4sIDEpKSk7XHJcbiAgICAgICRwb3N0OiBtYXAtbWVyZ2UoJHByZSwgKHNwYW46IG50aCgkc3BhbiwgMikpKTtcclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICAkcG9zdDogJHByZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzcXVpc2gsICRpbnNwZWN0Li4uKTtcclxuICBAaW5jbHVkZSBwcmUoJHByZSk7XHJcbiAgQGluY2x1ZGUgcG9zdCgkcG9zdCk7XHJcbn1cclxuIiwiLy8gUGFkZGluZyBTeW50YXhcclxuLy8gPT09PT09PT09PT09PT1cclxuXHJcbi8vIFByZWZpeFxyXG4vLyAtLS0tLS1cclxuLy8gQWRkIHNwYW5uaW5nLXBhZGRpbmcgYmVmb3JlIGFuIGVsZW1lbnQuXHJcbi8vIC0gJHNwYW4gIDogPHNwYW4+XHJcbkBtaXhpbiBwcmVmaXgoXHJcbiAgJHNwYW5cclxuKSB7XHJcbiAgJGluc3BlY3QgIDogJHNwYW47XHJcbiAgJHNwYW4gICAgIDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRzcGFuKSk7XHJcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xyXG4gICR3aWR0aCAgICA6IHNwYW4oJHNwYW4pO1xyXG5cclxuICBAaWYgaXMtaW5zaWRlKCRzcGFuKSB7XHJcbiAgICAkZ3V0dGVyOiBndXR0ZXIoJHNwYW4pO1xyXG4gICAgJHdpZHRoOiBpZigkZ3V0dGVyIGFuZCBjb21wYXJhYmxlKCR3aWR0aCwgJGd1dHRlciksICR3aWR0aCArICRndXR0ZXIsICR3aWR0aCk7XHJcbiAgfVxyXG5cclxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QocHJlZml4LCAkaW5zcGVjdCk7XHJcbiAgQGluY2x1ZGUgcGFkZGluZy1vdXRwdXQoJHdpZHRoLCBudWxsLCAkZmxvdyk7XHJcbn1cclxuXHJcbi8vIFN1ZmZpeFxyXG4vLyAtLS0tLS1cclxuLy8gQWRkIHNwYW5uaW5nLXBhZGRpbmcgYWZ0ZXIgYW4gZWxlbWVudC5cclxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cclxuQG1peGluIHN1ZmZpeChcclxuICAkc3BhblxyXG4pIHtcclxuICAkaW5zcGVjdCAgOiAkc3BhbjtcclxuICAkc3BhbiAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHNwYW4pKTtcclxuICAkZmxvdyAgICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XHJcbiAgJHdpZHRoICAgIDogc3Bhbigkc3Bhbik7XHJcblxyXG4gIEBpZiBpcy1pbnNpZGUoJHNwYW4pIHtcclxuICAgICRndXR0ZXI6IGd1dHRlcigkc3Bhbik7XHJcbiAgICAkd2lkdGg6IGlmKCRndXR0ZXIgYW5kIGNvbXBhcmFibGUoJHdpZHRoLCAkZ3V0dGVyKSwgJHdpZHRoICsgJGd1dHRlciwgJHdpZHRoKTtcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzdWZmaXgsICRpbnNwZWN0KTtcclxuICBAaW5jbHVkZSBwYWRkaW5nLW91dHB1dChudWxsLCAkd2lkdGgsICRmbG93KTtcclxufVxyXG5cclxuLy8gUGFkXHJcbi8vIC0tLVxyXG4vLyBBZGQgc3Bhbm5pbmctcGFkZGluZyBiZWZvcmUgYW5kIGFmdGVyIGFuIGVsZW1lbnQuXHJcbi8vIC0gJHByZSAgICAgOiA8c3Bhbj5cclxuLy8gLSBbJHBvc3RdICA6IDxzcGFuPlxyXG5AbWl4aW4gcGFkKFxyXG4gICRwcmUsXHJcbiAgJHBvc3Q6IGZhbHNlXHJcbikge1xyXG4gICRpbnNwZWN0ICA6ICRwcmUsICRwb3N0O1xyXG4gICRwcmUgICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3BhbigkcHJlKSk7XHJcblxyXG4gIEBpZiAkcG9zdCB7XHJcbiAgICAkcG9zdDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRwb3N0KSk7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkc3Bhbjogc3VzeS1nZXQoc3BhbiwgJHByZSk7XHJcbiAgICBAaWYgbGVuZ3RoKCRzcGFuKSA+IDEge1xyXG4gICAgICAkcHJlOiBtYXAtbWVyZ2UoJHByZSwgKHNwYW46IG50aCgkc3BhbiwgMSkpKTtcclxuICAgICAgJHBvc3Q6IG1hcC1tZXJnZSgkcHJlLCAoc3BhbjogbnRoKCRzcGFuLCAyKSkpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRwb3N0OiAkcHJlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHBhZCwgJGluc3BlY3QuLi4pO1xyXG4gIEBpbmNsdWRlIHByZWZpeCgkcHJlKTtcclxuICBAaW5jbHVkZSBzdWZmaXgoJHBvc3QpO1xyXG5cclxufVxyXG4iLCIvLyBCbGVlZCBTeW50YXhcclxuLy8gPT09PT09PT09PT09XHJcblxyXG4vLyBCbGVlZFxyXG4vLyAtLS0tLVxyXG4vLyBBZGQgbmVnYXRpdmUgbWFyZ2lucywgYW5kIGVxdWFsIHBvc2l0aXZlIHBhZGRpbmcgdG8gY3JlYXRlIGJsZWVkLlxyXG4vLyAtICRibGVlZCAgOiA8c3Bhbj5cclxuQG1peGluIGJsZWVkKFxyXG4gICRibGVlZDogMCBndXR0ZXIoKVxyXG4pIHtcclxuICAkaW5zcGVjdCAgOiAkYmxlZWQ7XHJcbiAgJG91dHB1dCAgIDogZ2V0LWJsZWVkKCRibGVlZCk7XHJcblxyXG4gIEBpZiBzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgIT0gY29udGVudC1ib3gge1xyXG4gICAgJG91dHB1dDogbWFwLW1lcmdlKChib3gtc2l6aW5nOiBjb250ZW50LWJveCksICRvdXRwdXQpO1xyXG4gIH1cclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGJsZWVkLCAkaW5zcGVjdCk7XHJcbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xyXG59XHJcblxyXG5cclxuLy8gQmxlZWQteFxyXG4vLyAtLS0tLS0tXHJcbi8vIFNob3J0Y3V0IGZvciBob3Jpem9udGFsIGJsZWVkLlxyXG4vLyAtICRibGVlZCAgOiA8c3Bhbj5cclxuQG1peGluIGJsZWVkLXgoXHJcbiAgJGJsZWVkOiBndXR0ZXIoKVxyXG4pIHtcclxuICAkYmxlZWQgIDogcGFyc2Utc3BhbigkYmxlZWQpO1xyXG4gICR0cmJsICAgOiBzdXN5LWdldChzcGFuLCAkYmxlZWQpO1xyXG5cclxuICBAaWYgbGVuZ3RoKCR0cmJsKSA9PSAxIHtcclxuICAgICRibGVlZDogbWFwLW1lcmdlKCRibGVlZCwgKHNwYW46IDAgbnRoKCR0cmJsLCAxKSkpO1xyXG4gIH0gQGVsc2UgaWYgbGVuZ3RoKCR0cmJsKSA9PSAyIHtcclxuICAgICRibGVlZDogbWFwLW1lcmdlKCRibGVlZCwgKHNwYW46IDAgbnRoKCR0cmJsLCAyKSAwIG50aCgkdHJibCwgMSkpKTtcclxuICB9IEBlbHNlIHtcclxuICAgIEB3YXJuICdibGVlZC14IG9ubHkgdGFrZXMgMiBsZW5ndGhzLCBidXQgI3tsZW5ndGgoJHRyYmwpfSB3ZXJlIHBhc3NlZC4nO1xyXG4gIH1cclxuXHJcbiAgQGluY2x1ZGUgYmxlZWQoJGJsZWVkKTtcclxufVxyXG5cclxuXHJcbi8vIEJsZWVkLXlcclxuLy8gLS0tLS0tLVxyXG4vLyBTaG9ydGN1dCBmb3IgdmVydGljYWwgYmxlZWQuXHJcbi8vIC0gJGJsZWVkICA6IDxzcGFuPlxyXG5AbWl4aW4gYmxlZWQteShcclxuICAkYmxlZWQ6IGlmKGZ1bmN0aW9uLWV4aXN0cyhyaHl0aG0pLCByaHl0aG0oMSksIDFlbSlcclxuKSB7XHJcbiAgJGJsZWVkICA6IHBhcnNlLXNwYW4oJGJsZWVkKTtcclxuICAkdHJibCAgIDogc3VzeS1nZXQoc3BhbiwgJGJsZWVkKTtcclxuXHJcbiAgQGlmIGxlbmd0aCgkdHJibCkgPT0gMSB7XHJcbiAgICAkYmxlZWQ6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiBudGgoJHRyYmwsIDEpIDApKTtcclxuICB9IEBlbHNlIGlmIGxlbmd0aCgkdHJibCkgPT0gMiB7XHJcbiAgICAkYmxlZWQ6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiBudGgoJHRyYmwsIDEpIDAgbnRoKCR0cmJsLCAyKSAwKSk7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAd2FybiAnYmxlZWQteSBvbmx5IHRha2VzIDIgbGVuZ3RocywgYnV0ICN7bGVuZ3RoKCR0cmJsKX0gd2VyZSBwYXNzZWQuJztcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIGJsZWVkKCRibGVlZCk7XHJcbn1cclxuXHJcblxyXG4vLyBHZXQgQmxlZWRcclxuLy8gLS0tLS0tLS0tXHJcbi8vIFJldHVybiBibGVlZCBvdXRwdXQgdmFsdWVzXHJcbi8vIC0gJGJsZWVkOiA8c3Bhbj5cclxuQGZ1bmN0aW9uIGdldC1ibGVlZChcclxuICAkYmxlZWRcclxuKSB7XHJcbiAgJGJsZWVkICAgIDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRibGVlZCkpO1xyXG4gICR0cmJsICAgICA6IHN1c3ktZ2V0KHNwYW4sICRibGVlZCk7XHJcbiAgJHNob3J0ICAgIDogbnVsbDtcclxuICAkb3V0cHV0ICAgOiAoKTtcclxuXHJcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJHRyYmwpIHtcclxuICAgICR0aGlzOiBudGgoJHRyYmwsICRpKTtcclxuICAgICRuZXc6ICgpO1xyXG4gICAgJG1hcmdpbjogbnVsbDtcclxuICAgICRwYWRkaW5nOiBudWxsO1xyXG4gICAgJHBhZGRpbmcteDogbnVsbDtcclxuXHJcbiAgICBAaWYgJHRoaXMgPiAwIHtcclxuICAgICAgJHRoaXM6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiAkdGhpcykpO1xyXG4gICAgICAkbWFyZ2luOiBzcGFuKCR0aGlzKTtcclxuICAgICAgJHBhZGRpbmc6ICRtYXJnaW47XHJcbiAgICAgICRwYWRkaW5nLXg6ICRwYWRkaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIEBpZiAkbWFyZ2luIGFuZCAkbWFyZ2luID4gMCB7XHJcbiAgICAgICRtYXJnaW46IC0gJG1hcmdpbjtcclxuXHJcbiAgICAgIEBpZiBpcy1pbnNpZGUoJHRoaXMpIHtcclxuICAgICAgICAkZ3V0dGVyOiBndXR0ZXIoJHRoaXMpO1xyXG4gICAgICAgICRqb2luOiBpZigkZ3V0dGVyIGFuZCBjb21wYXJhYmxlKCRwYWRkaW5nLCAkZ3V0dGVyKSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgICRwYWRkaW5nLXg6IGlmKCRqb2luIGFuZCAkcGFkZGluZyA+IDAsICRwYWRkaW5nICsgJGd1dHRlciwgJHBhZGRpbmcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQGlmICRpID09IDEge1xyXG4gICAgICAkbmV3OiAoXHJcbiAgICAgICAgbWFyZ2luLXRvcDogJG1hcmdpbixcclxuICAgICAgICBwYWRkaW5nLXRvcDogJHBhZGRpbmcsXHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAkbWFyZ2luLFxyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICRwYWRkaW5nLXgsXHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJG1hcmdpbixcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogJHBhZGRpbmcsXHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICRtYXJnaW4sXHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAkcGFkZGluZy14LFxyXG4gICAgICApO1xyXG4gICAgfSBAZWxzZSBpZiAkaSA9PSAyIHtcclxuICAgICAgJG5ldzogKFxyXG4gICAgICAgIG1hcmdpbi1yaWdodDogJG1hcmdpbixcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkcGFkZGluZy14LFxyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAkbWFyZ2luLFxyXG4gICAgICAgIHBhZGRpbmctbGVmdDogJHBhZGRpbmcteCxcclxuICAgICAgKTtcclxuICAgIH0gQGVsc2UgaWYgJGkgPT0gMyB7XHJcbiAgICAgICRuZXc6IChcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAkbWFyZ2luLFxyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAkcGFkZGluZyxcclxuICAgICAgKTtcclxuICAgIH0gQGVsc2UgaWYgJGkgPT0gNCB7XHJcbiAgICAgICRuZXc6IChcclxuICAgICAgICBtYXJnaW4tbGVmdDogJG1hcmdpbixcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6ICRwYWRkaW5nLXgsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgJG91dHB1dDogbWFwLW1lcmdlKCRvdXRwdXQsICRuZXcpO1xyXG4gIH1cclxuXHJcbiAgQGVhY2ggJHByb3AsICR2YWx1ZSBpbiAkb3V0cHV0IHtcclxuICAgICRvdXRwdXQ6IGlmKCR2YWx1ZSA9PSAwLCBtYXAtbWVyZ2UoJG91dHB1dCwgKCRwcm9wOiBudWxsKSksICRvdXRwdXQpO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiBibGVlZC1zaG9ydGhhbmQoJG91dHB1dCk7XHJcbn1cclxuXHJcbi8vIEJsZWVkIFNob3J0aGFuZFxyXG4vLyAtLS0tLS0tLS0tLS0tLS1cclxuLy8gQ29udmVydCBibGVlZCBvdXRwdXQgaW50byBzaG9ydGhhbmQgd2hlbiBwb3NzaWJsZS5cclxuLy8gLSAkYmxlZWQ6IDxvdXRwdXQgbWFwPlxyXG5AZnVuY3Rpb24gYmxlZWQtc2hvcnRoYW5kKFxyXG4gICRibGVlZFxyXG4pIHtcclxuICAkbWFyZ2luOiAoKTtcclxuICAkcGFkZGluZzogKCk7XHJcbiAgJHJldHVybjogKCk7XHJcblxyXG4gIEBlYWNoICRrZXksICR2YWx1ZSBpbiAkYmxlZWQge1xyXG4gICAgQGlmIHN0ci1pbmRleCgka2V5LCBtYXJnaW4pIHtcclxuICAgICAgJG1hcmdpbjogbWFwLW1lcmdlKCRtYXJnaW4sICgka2V5OiAkdmFsdWUpKTtcclxuICAgIH0gQGVsc2UgaWYgc3RyLWluZGV4KCRrZXksIHBhZGRpbmcpID4gMCB7XHJcbiAgICAgICRwYWRkaW5nOiBtYXAtbWVyZ2UoJHBhZGRpbmcsICgka2V5OiAkdmFsdWUpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICRwcm9wczogKFxyXG4gICAgbWFyZ2luOiAkbWFyZ2luLFxyXG4gICAgcGFkZGluZzogJHBhZGRpbmcsXHJcbiAgKTtcclxuXHJcbiAgQGVhY2ggJG5hbWUsICRtYXAgaW4gJHByb3BzIHtcclxuICAgICRmb3VyOiBpZihsZW5ndGgobWFwLWtleXMoJG1hcCkpID09IDQsIHRydWUsIGZhbHNlKTtcclxuICAgICRudWxsOiBpZihpbmRleChtYXAtdmFsdWVzKCRtYXApLCBudWxsKSwgdHJ1ZSwgZmFsc2UpO1xyXG5cclxuICAgIEBpZiAkZm91ciBhbmQgbm90KCRudWxsKSB7XHJcbiAgICAgICR0b3A6IG1hcC1nZXQoJG1hcCwgJyN7JG5hbWV9LXRvcCcpO1xyXG4gICAgICAkcmlnaHQ6IG1hcC1nZXQoJG1hcCwgJyN7JG5hbWV9LXJpZ2h0Jyk7XHJcbiAgICAgICRib3R0b206IG1hcC1nZXQoJG1hcCwgJyN7JG5hbWV9LWJvdHRvbScpO1xyXG4gICAgICAkbGVmdDogbWFwLWdldCgkbWFwLCAnI3skbmFtZX0tbGVmdCcpO1xyXG5cclxuICAgICAgJHRiOiBpZigkdG9wID09ICRib3R0b20sICR0b3AsIG51bGwpO1xyXG4gICAgICAkcmw6IGlmKCRyaWdodCA9PSAkbGVmdCwgJHJpZ2h0LCBudWxsKTtcclxuICAgICAgJGFsbDogaWYoJHRiID09ICRybCwgJHRiLCBudWxsKTtcclxuXHJcbiAgICAgICRuZXc6IGlmKCRhbGwsICRhbGwsIG51bGwpO1xyXG5cclxuICAgICAgQGlmIG5vdCgkbmV3KSB7XHJcbiAgICAgICAgQGlmICR0YiBhbmQgJHJsIHtcclxuICAgICAgICAgICRuZXc6ICR0YiAkcmw7XHJcbiAgICAgICAgfSBAZWxzZSBpZiAkcmwge1xyXG4gICAgICAgICAgJG5ldzogJHRvcCAkcmwgJGJvdHRvbTtcclxuICAgICAgICB9IEBlbHNlIHtcclxuICAgICAgICAgICRuZXc6ICR0b3AgJHJpZ2h0ICRib3R0b20gJGxlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAkcmV0dXJuOiBtYXAtbWVyZ2UoJHJldHVybiwgKCRuYW1lOiAkbmV3KSk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJHJldHVybjogbWFwLW1lcmdlKCRyZXR1cm4sICRtYXApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkcmV0dXJuO1xyXG59XHJcbiIsIi8vIEJyZWFrcG9pbnQgSW50ZWdyYXRpb25cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuJHN1c3ktbWVkaWE6ICgpICFkZWZhdWx0O1xyXG4kc3VzeS1tZWRpYS1mYWxsYmFjazogZmFsc2UgIWRlZmF1bHQ7XHJcblxyXG4kX3N1c3ktbWVkaWEtY29udGV4dDogKCk7XHJcblxyXG5cclxuLy8gU3VzeSBCcmVha3BvaW50XHJcbi8vIC0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDaGFuZ2UgZ3JpZHMgYXQgZGlmZmVyZW50IG1lZGlhIHF1ZXJ5IGJyZWFrcG9pbnRzLlxyXG4vLyAtICRxdWVyeSAgICAgOiA8bWluLXdpZHRoPiBbPG1heC13aWR0aD5dIHwgPHByb3BlcnR5PiA8dmFsdWU+IHwgPG1hcD5cclxuLy8gLSAkbGF5b3V0ICAgIDogPHNldHRpbmdzPlxyXG4vLyAtICRuby1xdWVyeSAgOiA8Ym9vbGVhbj4gfCA8c2VsZWN0b3I+XHJcbkBtaXhpbiBzdXN5LWJyZWFrcG9pbnQoXHJcbiAgJHF1ZXJ5LFxyXG4gICRsYXlvdXQ6IGZhbHNlLFxyXG4gICRuby1xdWVyeTogJHN1c3ktbWVkaWEtZmFsbGJhY2tcclxuKSB7XHJcbiAgQGluY2x1ZGUgc3VzeS1tZWRpYS1yb3V0ZXIoJHF1ZXJ5LCAkbm8tcXVlcnkpIHtcclxuICAgIEBpZiAkbGF5b3V0IHtcclxuICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGxheW91dCkge1xyXG4gICAgICAgIEBjb250ZW50O1xyXG4gICAgICB9XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gU3VzeSBNZWRpYVxyXG4vLyAtLS0tLS0tLS0tXHJcbi8vIC0gJHF1ZXJ5OiA8bWluLXdpZHRoPiBbPG1heC13aWR0aD5dIHwgPHByb3BlcnR5PiA8dmFsdWU+XHJcbi8vIC0gJG5vLXF1ZXJ5OiA8Ym9vbGVhbj4gfCA8c2VsZWN0b3I+XHJcbkBtaXhpbiBzdXN5LW1lZGlhKFxyXG4gICRxdWVyeSxcclxuICAkbm8tcXVlcnk6ICRzdXN5LW1lZGlhLWZhbGxiYWNrXHJcbikge1xyXG4gICRvbGQtY29udGV4dDogJF9zdXN5LW1lZGlhLWNvbnRleHQ7XHJcbiAgJG5hbWU6IGlmKG1hcC1oYXMta2V5KCRzdXN5LW1lZGlhLCAkcXVlcnkpLCAkcXVlcnksIG51bGwpO1xyXG4gICRxdWVyeTogc3VzeS1nZXQtbWVkaWEoJHF1ZXJ5KTtcclxuICAkcXVlcnk6IHN1c3ktcGFyc2UtbWVkaWEoJHF1ZXJ5KTtcclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1tZWRpYS1jb250ZXh0KCRxdWVyeSwgJG5hbWUpO1xyXG5cclxuICBAaWYgJG5vLXF1ZXJ5IGFuZCB0eXBlLW9mKCRuby1xdWVyeSkgIT0gc3RyaW5nIHtcclxuICAgIEBjb250ZW50O1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQG1lZGlhICN7c3VzeS1yZW5kZXItbWVkaWEoJHF1ZXJ5KX0ge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBAaWYgdHlwZS1vZigkbm8tcXVlcnkpID09IHN0cmluZyB7XHJcbiAgICAgICN7JG5vLXF1ZXJ5fSAmIHtcclxuICAgICAgICBAY29udGVudDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGluY2x1ZGUgc3VzeS1tZWRpYS1jb250ZXh0KCRvbGQtY29udGV4dCwgJGNsZWFuOiB0cnVlKTtcclxufVxyXG5cclxuXHJcbi8vIE1lZGlhIFJvdXRlclxyXG4vLyAtLS0tLS0tLS0tLS1cclxuLy8gUm91dCBtZWRpYSBhcmd1bWVudHMgdG8gdGhlIGNvcnJlY3QgbWl4aW4uXHJcbkBtaXhpbiBzdXN5LW1lZGlhLXJvdXRlcihcclxuICAkcXVlcnksXHJcbiAgJG5vLXF1ZXJ5OiAkc3VzeS1tZWRpYS1mYWxsYmFja1xyXG4pIHtcclxuICBAaWYgc3VzeS1zdXBwb3J0KGJyZWFrcG9pbnQsIChtaXhpbjogYnJlYWtwb2ludCksICR3YXJuOiBmYWxzZSkge1xyXG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludCgkcXVlcnksICRuby1xdWVyeSkge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxuICB9IEBlbHNlIHtcclxuICAgIEBpbmNsdWRlIHN1c3ktbWVkaWEoJHF1ZXJ5LCAkbm8tcXVlcnkpIHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gVXBkYXRlIENvbnRleHRcclxuLy8gLS0tLS0tLS0tLS0tLVxyXG4vLyBTZXQgdGhlIG5ldyBtZWRpYSBjb250ZXh0XHJcbkBtaXhpbiBzdXN5LW1lZGlhLWNvbnRleHQoXHJcbiAgJHF1ZXJ5LFxyXG4gICRuYW1lOiBudWxsLFxyXG4gICRjbGVhbjogZmFsc2VcclxuKSB7XHJcbiAgJHF1ZXJ5OiBtYXAtbWVyZ2UoKG5hbWU6ICRuYW1lKSwgJHF1ZXJ5KTtcclxuXHJcbiAgQGlmICRjbGVhbiB7XHJcbiAgICAkX3N1c3ktbWVkaWEtY29udGV4dDogJHF1ZXJ5ICFnbG9iYWw7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAkX3N1c3ktbWVkaWEtY29udGV4dDogbWFwLW1lcmdlKCRfc3VzeS1tZWRpYS1jb250ZXh0LCAkcXVlcnkpICFnbG9iYWw7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gTWVkaWEgQ29udGV4dFxyXG4vLyAtLS0tLS0tLS0tLS0tXHJcbi8vIFJldHVybiB0aGUgZnVsbCBtZWRpYSBjb250ZXh0LCBvciBhIHNpbmdsZSBtZWRpYSBwcm9wZXJ0eSAoZS5nLiBtaW4td2lkdGgpXHJcbkBmdW5jdGlvbiBzdXN5LW1lZGlhLWNvbnRleHQoXHJcbiAgJHByb3BlcnR5OiBmYWxzZVxyXG4pIHtcclxuICBAaWYgJHByb3BlcnR5IHtcclxuICAgIEByZXR1cm4gbWFwLWdldCgkX3N1c3ktbWVkaWEtY29udGV4dCwgJHByb3BlcnR5KTtcclxuICB9IEBlbHNlIHtcclxuICAgIEByZXR1cm4gJF9zdXN5LW1lZGlhLWNvbnRleHQ7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gR2V0IE1lZGlhXHJcbi8vIC0tLS0tLS0tLVxyXG4vLyBSZXR1cm4gYSBuYW1lZCBtZWRpYS1xdWVyeSBmcm9tICRzdXN5LW1lZGlhLlxyXG4vLyAtICRuYW1lOiA8a2V5PlxyXG5AZnVuY3Rpb24gc3VzeS1nZXQtbWVkaWEoXHJcbiAgJG5hbWVcclxuKSB7XHJcbiAgQGlmIG1hcC1oYXMta2V5KCRzdXN5LW1lZGlhLCAkbmFtZSkge1xyXG4gICAgJG1hcC12YWx1ZTogbWFwLWdldCgkc3VzeS1tZWRpYSwgJG5hbWUpO1xyXG4gICAgQGlmICgkbmFtZSA9PSAkbWFwLXZhbHVlKSB7XHJcbiAgICAgICRuYW1lOiAkbWFwLXZhbHVlO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRuYW1lOiBzdXN5LWdldC1tZWRpYSgkbWFwLXZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gJG5hbWU7XHJcbn1cclxuXHJcblxyXG4vLyBSZW5kZXIgTWVkaWFcclxuLy8gLS0tLS0tLS0tLS0tXHJcbi8vIEJ1aWxkIGEgbWVkaWEtcXVlcnkgc3RyaW5nIGZyb20gdmFyaW91cyBtZWRpYSBzZXR0aW5nc1xyXG5AZnVuY3Rpb24gc3VzeS1yZW5kZXItbWVkaWEoXHJcbiAgJHF1ZXJ5XHJcbikge1xyXG4gICRvdXRwdXQ6IG51bGw7XHJcbiAgQGVhY2ggJHByb3BlcnR5LCAkdmFsdWUgaW4gJHF1ZXJ5IHtcclxuICAgICRzdHJpbmc6IG51bGw7XHJcblxyXG4gICAgQGlmICRwcm9wZXJ0eSA9PSBtZWRpYSB7XHJcbiAgICAgICRzdHJpbmc6ICR2YWx1ZTtcclxuICAgIH0gQGVsc2Uge1xyXG4gICAgICAkc3RyaW5nOiAnKCN7JHByb3BlcnR5fTogI3skdmFsdWV9KSc7XHJcbiAgICB9XHJcblxyXG4gICAgJG91dHB1dDogaWYoJG91dHB1dCwgJyN7JG91dHB1dH0gYW5kICN7JHN0cmluZ30nLCAkc3RyaW5nKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJG91dHB1dDtcclxufVxyXG5cclxuXHJcbi8vIFBhcnNlIE1lZGlhXHJcbi8vIC0tLS0tLS0tLS0tXHJcbi8vIFJldHVybiBwYXJzZWQgbWVkaWEtcXVlcnkgc2V0dGluZ3MgYmFzZWQgb24gc2hvcnRoYW5kXHJcbkBmdW5jdGlvbiBzdXN5LXBhcnNlLW1lZGlhKFxyXG4gICRxdWVyeVxyXG4pIHtcclxuICAkbXE6IG51bGw7XHJcbiAgQGlmIHR5cGUtb2YoJHF1ZXJ5KSA9PSBtYXAge1xyXG4gICAgJG1xOiAkcXVlcnk7XHJcbiAgfSBAZWxzZSBpZiB0eXBlLW9mKCRxdWVyeSkgPT0gbnVtYmVyIHtcclxuICAgICRtcTogKG1pbi13aWR0aDogJHF1ZXJ5KTtcclxuICB9IEBlbHNlIGlmIHR5cGUtb2YoJHF1ZXJ5KSA9PSBsaXN0IGFuZCBsZW5ndGgoJHF1ZXJ5KSA9PSAyIHtcclxuICAgIEBpZiB0eXBlLW9mKG50aCgkcXVlcnksIDEpKSA9PSBudW1iZXIge1xyXG4gICAgICAkbXE6IChcclxuICAgICAgICBtaW4td2lkdGg6IG1pbigkcXVlcnkuLi4pLFxyXG4gICAgICAgIG1heC13aWR0aDogbWF4KCRxdWVyeS4uLiksXHJcbiAgICAgICk7XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgJG1xOiAobnRoKCRxdWVyeSwgMSk6IG50aCgkcXVlcnksIDIpKTtcclxuICAgIH1cclxuICB9IEBlbHNlIHtcclxuICAgICRtcTogKG1lZGlhOiAnI3skcXVlcnl9Jyk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRtcTtcclxufVxyXG4iLCIvLyBTdVxyXG4vLyA9PVxyXG5cclxuQGltcG9ydCAnc3VzeS9zdSc7XHJcbiIsIi8vIFN1XHJcbi8vID09XHJcblxyXG5AaW1wb3J0IFwic3UvdXRpbGl0aWVzXCI7XHJcbkBpbXBvcnQgXCJzdS9zZXR0aW5nc1wiO1xyXG5AaW1wb3J0IFwic3UvdmFsaWRhdGlvblwiO1xyXG5AaW1wb3J0IFwic3UvZ3JpZFwiO1xyXG4iLCIvLyBNYXAgRnVuY3Rpb25zXHJcbi8vID09PT09PT09PT09PT1cclxuXHJcblxyXG4vLyBUcnVuY2F0ZSBMaXN0XHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gLSBSZXR1cm4gYSBsaXN0LCB0cnVuY2F0ZWQgdG8gYSBnaXZlbiBsZW5ndGhcclxuQGZ1bmN0aW9uIF9zdXN5LXRydW5jYXRlLWxpc3QoXHJcbiAgJGxpc3QsXHJcbiAgJGxlbmd0aFxyXG4pIHtcclxuICAkX3JldHVybjogKCk7XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XHJcbiAgICAkX3JldHVybjogaWYoJGkgPD0gJGxlbmd0aCwgYXBwZW5kKCRfcmV0dXJuLCBudGgoJGxpc3QsICRpKSksICRfcmV0dXJuKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcblxyXG4vLyBEZWVwIEdldFxyXG4vLyAtLS0tLS0tLVxyXG4vLyAtIFJldHVybiBhIHZhbHVlIGRlZXAgaW4gbmVzdGVkIG1hcHNcclxuQGZ1bmN0aW9uIF9zdXN5LWRlZXAtZ2V0KFxyXG4gICRtYXAsXHJcbiAgJGtleXMuLi5cclxuKSB7XHJcbiAgJF9yZXR1cm46ICRtYXA7XHJcblxyXG4gIEBlYWNoICRrZXkgaW4gJGtleXMge1xyXG4gICAgQGlmIHR5cGUtb2YoJF9yZXR1cm4pID09IG1hcCB7XHJcbiAgICAgICRfcmV0dXJuOiBtYXAtZ2V0KCRfcmV0dXJuLCAka2V5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcblxyXG4vLyBEZWVwIFNldFxyXG4vLyAtLS0tLS0tLVxyXG4vLyAtIFNldCBhIHZhbHVlIGRlZXAgaW4gbmVzdGVkIG1hcHNcclxuQGZ1bmN0aW9uIF9zdXN5LWRlZXAtc2V0KFxyXG4gICRtYXAsXHJcbiAgJGtleXMtdmFsdWUuLi5cclxuKSB7XHJcbiAgJF92YWx1ZTogbnRoKCRrZXlzLXZhbHVlLCAtMSk7XHJcbiAgJF9rZXlzOiBfc3VzeS10cnVuY2F0ZS1saXN0KCRrZXlzLXZhbHVlLCBsZW5ndGgoJGtleXMtdmFsdWUpIC0gMSk7XHJcbiAgJF9sZW5ndGg6IGxlbmd0aCgkX2tleXMpO1xyXG4gICRfcmV0dXJuOiAoKTtcclxuXHJcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkX2xlbmd0aCB7XHJcbiAgICAkX246IDAgLSAkaTtcclxuICAgICRfbGV2ZWw6IF9zdXN5LXRydW5jYXRlLWxpc3QoJF9rZXlzLCAkX2xlbmd0aCArICRfbik7XHJcbiAgICAkX2xldmVsOiBfc3VzeS1kZWVwLWdldCgkbWFwLCAkX2xldmVsLi4uKTtcclxuICAgICRfbWVyZ2U6IG50aCgkX2tleXMsICRfbik7XHJcbiAgICAkX21lcmdlOiAoJF9tZXJnZTogJF92YWx1ZSk7XHJcbiAgICAkX3JldHVybjogaWYoJF9sZXZlbCwgbWFwLW1lcmdlKCRfbGV2ZWwsICRfbWVyZ2UpLCAkX21lcmdlKTtcclxuICAgICRfdmFsdWU6ICRfcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkX3JldHVybjtcclxufVxyXG5cclxuXHJcbi8vIERlZXAgTWVyZ2VcclxuLy8gLS0tLS0tLS0tLVxyXG4vLyBSZXR1cm4gMiBvYmplY3RzIG9mIGFueSBkZXB0aCwgbWVyZ2VkXHJcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLW1lcmdlKFxyXG4gICRtYXAxLFxyXG4gICRtYXAyXHJcbikge1xyXG5cclxuICBAaWYgdHlwZS1vZigkbWFwMSkgIT0gbWFwIG9yIHR5cGUtb2YoJG1hcDIpICE9IG1hcCB7XHJcbiAgICAkbWFwMTogJG1hcDI7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJG1hcDIge1xyXG4gICAgICAkX25ldzogKCRrZXk6IF9zdXN5X2RlZXAtbWVyZ2UobWFwLWdldCgkbWFwMSwgJGtleSksICR2YWx1ZSkpO1xyXG4gICAgICAkbWFwMTogbWFwLW1lcmdlKCRtYXAxLCAkX25ldyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRtYXAxO1xyXG59XHJcblxyXG5cclxuLy8gRGVlcCBIYXMtS2V5XHJcbi8vIC0tLS0tLS0tLS0tLVxyXG4vLyAtIFJldHVybiB0cnVlIGlmIGEgZGVlcCBrZXkgZXhpc3RzXHJcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLWhhcy1rZXkoXHJcbiAgJG1hcCxcclxuICAka2V5cy4uLlxyXG4pIHtcclxuICAkX3JldHVybjogbnVsbDtcclxuICAkX3N0b3A6IGZhbHNlO1xyXG5cclxuICBAZWFjaCAka2V5IGluICRrZXlzIHtcclxuICAgIEBpZiBub3QoJF9zdG9wKSB7XHJcbiAgICAgICRfcmV0dXJuOiBtYXAtaGFzLWtleSgkbWFwLCAka2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBAaWYgJF9yZXR1cm4ge1xyXG4gICAgICAkbWFwOiBtYXAtZ2V0KCRtYXAsICRrZXkpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRfc3RvcDogdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuIiwiLy8gU2V0dGluZ3NcclxuLy8gPT09PT09PT1cclxuXHJcbi8vIFZlcnNpb25cclxuLy8gLS0tLS0tLVxyXG4kc3UtdmVyc2lvbjogMS4xO1xyXG5cclxuXHJcbi8vIERlZmF1bHQgU2V0dGluZ3NcclxuLy8gLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBQUklWQVRFOiBUaGUgYmFzaWMgc2V0dGluZ3NcclxuJHN1c3ktZGVmYXVsdHM6IChcclxuICBjb2x1bW5zOiA0LFxyXG4gIGd1dHRlcnM6IC4yNSxcclxuKTtcclxuXHJcblxyXG4vLyBVc2VyIFNldHRpbmdzXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gLSBEZWZpbmUgdGhlICRzdXN5IHZhcmlhYmxlIHdpdGggYSBtYXAgb2YgeW91ciBvd24gc2V0dGluZ3MuXHJcbi8vIC0gU2V0IEVJVEhFUiAkY29sdW1uLXdpZHRoIE9SICRjb250YWluZXJcclxuLy8gLSBVc2UgJGNvbHVtbi13aWR0aCBmb3Igc3RhdGljIGxheW91dHNcclxuJHN1c3k6ICgpICFkZWZhdWx0O1xyXG5cclxuXHJcbi8vIFN1c3kgRGVmYXVsdHNcclxuLy8gLS0tLS0tLS0tLS0tLVxyXG4vLyBQUklWQVRFOiBBZGQgZGVmYXVsdHMgdG8gU3VzeVxyXG5AbWl4aW4gc3VzeS1kZWZhdWx0cyhcclxuICAkZGVmYXVsdHNcclxuKSB7XHJcbiAgJHN1c3ktZGVmYXVsdHM6IG1hcC1tZXJnZSgkc3VzeS1kZWZhdWx0cywgJGRlZmF1bHRzKSAhZ2xvYmFsO1xyXG59XHJcblxyXG5cclxuLy8gU3VzeSBTZXRcclxuLy8gLS0tLS0tLS1cclxuLy8gQ2hhbmdlIG9uZSBzZXR0aW5nXHJcbi8vIC0gJGtleSAgIDogc2V0dGluZyBuYW1lXHJcbi8vIC0gJHZhbHVlIDogc2V0dGluZyB2YWx1ZVxyXG5AbWl4aW4gc3VzeS1zZXQoXHJcbiAgJGtleS12YWx1ZS4uLlxyXG4pIHtcclxuICAkc3VzeTogX3N1c3ktZGVlcC1zZXQoJHN1c3ksICRrZXktdmFsdWUuLi4pICFnbG9iYWw7XHJcbn1cclxuXHJcblxyXG4vLyBTdXN5IEdldFxyXG4vLyAtLS0tLS0tLVxyXG4vLyBSZXR1cm4gb25lIHNldHRpbmcgZnJvbSBhIGdyaWRcclxuLy8gLSAka2V5ICAgICA6IDxrZXl3b3JkPlxyXG4vLyAtICRsYXlvdXQgIDogPHNldHRpbmdzPlxyXG5AZnVuY3Rpb24gc3VzeS1nZXQoXHJcbiAgJGtleSxcclxuICAkbGF5b3V0OiBtYXAtbWVyZ2UoJHN1c3ktZGVmYXVsdHMsICRzdXN5KVxyXG4pIHtcclxuICAkbGF5b3V0OiBwYXJzZS1ncmlkKCRsYXlvdXQpO1xyXG4gICRfb3B0aW9uczogJGxheW91dCAkc3VzeSAkc3VzeS1kZWZhdWx0cztcclxuICAkX2JyZWFrOiBmYWxzZTtcclxuICAkX3JldHVybjogbnVsbDtcclxuXHJcbiAgQGVhY2ggJG9wdCBpbiAkX29wdGlvbnMge1xyXG4gICAgQGlmIHR5cGUtb2YoJG9wdCkgPT0gbWFwIGFuZCBub3QoJF9icmVhaykge1xyXG4gICAgICAkX2tleXNldDogX3N1c3ktZGVlcC1oYXMta2V5KCRvcHQsICRrZXkuLi4pO1xyXG4gICAgICBAaWYgJF9rZXlzZXQge1xyXG4gICAgICAgICRfcmV0dXJuOiBfc3VzeS1kZWVwLWdldCgkb3B0LCAka2V5Li4uKTtcclxuICAgICAgICAkX2JyZWFrOiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRfcmV0dXJuO1xyXG59XHJcbiIsIi8vIE1hdGggVmFsaWRhdGlvblxyXG4vLyA9PT09PT09PT09PT09PT1cclxuXHJcblxyXG4vLyBWYWxpZCBDb2x1bW5zXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gQ2hlY2sgdGhhdCBhIGNvbHVtbiBzZXR0aW5nIGlzIHZhbGlkLlxyXG5AZnVuY3Rpb24gdmFsaWQtY29sdW1ucyhcclxuICAkY29sdW1ucyxcclxuICAkc2lsZW50OiBmYWxzZVxyXG4pIHtcclxuICAkdHlwZTogdHlwZS1vZigkY29sdW1ucyk7XHJcbiAgJHJldHVybjogbnVsbDtcclxuXHJcbiAgQGlmICR0eXBlID09IG51bWJlciBhbmQgdW5pdGxlc3MoJGNvbHVtbnMpIHtcclxuICAgICRyZXR1cm46ICRjb2x1bW5zO1xyXG4gIH0gQGVsc2UgaWYgJHR5cGUgPT0gbGlzdCB7XHJcbiAgICAkZmFpbDogbnVsbDtcclxuICAgIEBlYWNoICRjb2wgaW4gJGNvbHVtbnMge1xyXG4gICAgICBAaWYgdHlwZS1vZigkY29sKSA9PSBudW1iZXIge1xyXG4gICAgICAgICRmYWlsOiAkZmFpbCBvciBpZih1bml0bGVzcygkY29sKSwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgIH0gQGVsc2Uge1xyXG4gICAgICAgICRmYWlsOiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAkcmV0dXJuOiBpZigkZmFpbCwgJHJldHVybiwgJGNvbHVtbnMpO1xyXG4gIH1cclxuXHJcbiAgQGlmICRyZXR1cm4gIT0gJGNvbHVtbnMgYW5kIG5vdCgkc2lsZW50KSB7XHJcbiAgICAkcmV0dXJuOiBudWxsO1xyXG4gICAgJHdhcm46ICckY29sdW1ucyBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyIG9yIGxpc3Qgb2YgdW5pdGxlc3MgbnVtYmVycy4nO1xyXG4gICAgQHdhcm4gJHdhcm4gKyAnIEN1cnJlbnQgdmFsdWUgWyN7JHR5cGV9XTogI3skY29sdW1uc30nO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkcmV0dXJuO1xyXG59XHJcblxyXG5cclxuLy8gVmFsaWQgR3V0dGVyc1xyXG4vLyAtLS0tLS0tLS0tLS0tXHJcbi8vIENoZWNrIHRoYXQgYSBndXR0ZXIgc2V0dGluZyBpcyB2YWxpZC5cclxuQGZ1bmN0aW9uIHZhbGlkLWd1dHRlcnMoXHJcbiAgJGd1dHRlcnMsXHJcbiAgJHNpbGVudDogZmFsc2VcclxuKSB7XHJcbiAgJHR5cGU6IHR5cGUtb2YoJGd1dHRlcnMpO1xyXG4gICRyZXR1cm46IG51bGw7XHJcblxyXG4gIEBpZiAkdHlwZSA9PSBudW1iZXIgYW5kIHVuaXRsZXNzKCRndXR0ZXJzKSB7XHJcbiAgICAkcmV0dXJuOiAkZ3V0dGVycztcclxuICB9IEBlbHNlIGlmIG5vdCgkc2lsZW50KSB7XHJcbiAgICAkd2FybjogJyRndXR0ZXJzIG11c3QgYmUgYSB1bml0bGVzcyBudW1iZXIuJztcclxuICAgIEB3YXJuICR3YXJuICsgJyBDdXJyZW50IHZhbHVlIFsjeyR0eXBlfV06ICN7JGd1dHRlcnN9JztcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHJldHVybjtcclxufVxyXG4iLCIvLyBDb2x1bW4gbWF0aFxyXG4vLyA9PT09PT09PT09PVxyXG5cclxuXHJcbi8vIElzIFN5bW1ldHJpY2FsXHJcbi8vIC0tLS0tLS0tLS0tLS0tXHJcbi8vIFJldHVybnMgdHJ1ZSBpZiBhIGdyaWQgaXMgc3ltbWV0cmljYWwuXHJcbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cclxuQGZ1bmN0aW9uIGlzLXN5bW1ldHJpY2FsKFxyXG4gICRjb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zKVxyXG4pIHtcclxuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XHJcbiAgQHJldHVybiBpZih0eXBlLW9mKCRjb2x1bW5zKSA9PSBudW1iZXIsICRjb2x1bW5zLCBudWxsKTtcclxufVxyXG5cclxuXHJcbi8vIFN1c3kgQ291bnRcclxuLy8gLS0tLS0tLS0tLVxyXG4vLyBGaW5kIHRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiBhIGdpdmVuIGxheW91dFxyXG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XHJcbkBmdW5jdGlvbiBzdXN5LWNvdW50KFxyXG4gICRjb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zKVxyXG4pIHtcclxuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XHJcbiAgQHJldHVybiBpcy1zeW1tZXRyaWNhbCgkY29sdW1ucykgb3IgbGVuZ3RoKCRjb2x1bW5zKTtcclxufVxyXG5cclxuXHJcbi8vIFN1c3kgU3VtXHJcbi8vIC0tLS0tLS0tXHJcbi8vIEZpbmQgdGhlIHRvdGFsIHN1bSBvZiBjb2x1bW4tdW5pdHMgaW4gYSBsYXlvdXRcclxuLy8gLSBbJGNvbHVtbnNdICAgOiA8bnVtYmVyPiB8IDxsaXN0PlxyXG4vLyAtIFskZ3V0dGVyc10gICA6IDxyYXRpbz5cclxuLy8gLSBbJHNwcmVhZF0gICAgOiBmYWxzZS9uYXJyb3cgfCB3aWRlIHwgd2lkZXJcclxuQGZ1bmN0aW9uIHN1c3ktc3VtKFxyXG4gICRjb2x1bW5zICA6IHN1c3ktZ2V0KGNvbHVtbnMpLFxyXG4gICRndXR0ZXJzICA6IHN1c3ktZ2V0KGd1dHRlcnMpLFxyXG4gICRzcHJlYWQgICA6IGZhbHNlXHJcbikge1xyXG4gICRjb2x1bW5zOiB2YWxpZC1jb2x1bW5zKCRjb2x1bW5zKTtcclxuICAkZ3V0dGVyczogdmFsaWQtZ3V0dGVycygkZ3V0dGVycyk7XHJcblxyXG4gICRzcHJlYWQ6IGlmKCRzcHJlYWQgPT0gd2lkZSwgMCwgaWYoJHNwcmVhZCA9PSB3aWRlciwgMSwgLTEpKTtcclxuICAkZ3V0dGVyLXN1bTogKHN1c3ktY291bnQoJGNvbHVtbnMpICsgJHNwcmVhZCkgKiAkZ3V0dGVycztcclxuICAkY29sdW1uLXN1bTogaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpO1xyXG5cclxuICBAaWYgbm90KCRjb2x1bW4tc3VtKSB7XHJcbiAgICBAZWFjaCAkY29sdW1uIGluICRjb2x1bW5zIHtcclxuICAgICAgJGNvbHVtbi1zdW06ICgkY29sdW1uLXN1bSBvciAwKSArICRjb2x1bW47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRjb2x1bW4tc3VtICsgJGd1dHRlci1zdW07XHJcbn1cclxuXHJcblxyXG4vLyBTdXN5IFNsaWNlXHJcbi8vIC0tLS0tLS0tLS1cclxuLy8gUmV0dXJuIGEgc3Vic2V0IG9mIGNvbHVtbnMgYXQgYSBnaXZlbiBsb2NhdGlvbi5cclxuLy8gLSAkc3BhbiAgICAgICAgOiA8bnVtYmVyPlxyXG4vLyAtICRsb2NhdGlvbiAgICA6IDxudW1iZXI+XHJcbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cclxuQGZ1bmN0aW9uIHN1c3ktc2xpY2UoXHJcbiAgJHNwYW4sXHJcbiAgJGxvY2F0aW9uLFxyXG4gICRjb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zKVxyXG4pIHtcclxuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XHJcbiAgJHN1Yi1jb2x1bW5zOiAkc3BhbjtcclxuXHJcbiAgQGlmIG5vdChpcy1zeW1tZXRyaWNhbCgkY29sdW1ucykpIHtcclxuICAgICRsb2NhdGlvbjogJGxvY2F0aW9uIG9yIDE7XHJcbiAgICAkc3ViLWNvbHVtbnM6ICgpO1xyXG4gICAgQGZvciAkaSBmcm9tICRsb2NhdGlvbiB0byAoJGxvY2F0aW9uICsgJHNwYW4pIHtcclxuICAgICAgJHN1Yi1jb2x1bW5zOiBhcHBlbmQoJHN1Yi1jb2x1bW5zLCBudGgoJGNvbHVtbnMsICRpKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRzdWItY29sdW1ucztcclxufVxyXG5cclxuXHJcbi8vIFN1c3lcclxuLy8gLS0tLVxyXG4vLyBGaW5kIHRoZSBzdW0gb2YgYSBjb2x1bW4tc3Bhbi5cclxuLy8gLSAkc3BhbiAgICAgICAgOiA8bnVtYmVyPlxyXG4vLyAtICRsb2NhdGlvbiAgICA6IDxudW1iZXI+XHJcbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cclxuLy8gLSBbJGd1dHRlcnNdICAgOiA8cmF0aW8+XHJcbi8vIC0gWyRzcHJlYWRdICAgIDogZmFsc2UvbmFycm93IHwgd2lkZSB8IHdpZGVyXHJcbkBmdW5jdGlvbiBzdXN5KFxyXG4gICRzcGFuLFxyXG4gICRsb2NhdGlvbiAgICAgOiBmYWxzZSxcclxuICAkY29sdW1ucyAgICAgIDogc3VzeS1nZXQoY29sdW1ucyksXHJcbiAgJGd1dHRlcnMgICAgICA6IHN1c3ktZ2V0KGd1dHRlcnMpLFxyXG4gICRzcHJlYWQgICAgICAgOiBmYWxzZVxyXG4pIHtcclxuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XHJcbiAgJGd1dHRlcnM6IHZhbGlkLWd1dHRlcnMoJGd1dHRlcnMpO1xyXG4gICRzcGFuOiBzdXN5LXNsaWNlKCRzcGFuLCAkbG9jYXRpb24sICRjb2x1bW5zKTtcclxuXHJcbiAgQHJldHVybiBzdXN5LXN1bSgkc3BhbiwgJGd1dHRlcnMsICRzcHJlYWQpO1xyXG59XHJcbiIsIi8qIEVyaWMgTWV5ZXIncyBSZXNldCBDU1MgdjIuMCAtIGh0dHA6Ly9jc3NyZXNldC5jb20gKi9cclxuaHRtbCxib2R5LGRpdixzcGFuLGFwcGxldCxvYmplY3QsaWZyYW1lLGgxLGgyLGgzLGg0LGg1LGg2LHAsYmxvY2txdW90ZSxwcmUsYSxhYmJyLGFjcm9ueW0sYWRkcmVzcyxiaWcsY2l0ZSxjb2RlLGRlbCxkZm4sZW0saW1nLGlucyxrYmQscSxzLHNhbXAsc21hbGwsc3RyaWtlLHN0cm9uZyxzdWIsc3VwLHR0LHZhcixiLHUsaSxjZW50ZXIsZGwsZHQsZGQsb2wsdWwsbGksZmllbGRzZXQsZm9ybSxsYWJlbCxsZWdlbmQsdGFibGUsY2FwdGlvbix0Ym9keSx0Zm9vdCx0aGVhZCx0cix0aCx0ZCxhcnRpY2xlLGFzaWRlLGNhbnZhcyxkZXRhaWxzLGVtYmVkLGZpZ3VyZSxmaWdjYXB0aW9uLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1lbnUsbmF2LG91dHB1dCxydWJ5LHNlY3Rpb24sc3VtbWFyeSx0aW1lLG1hcmssYXVkaW8sdmlkZW97Ym9yZGVyOjA7Zm9udC1zaXplOjEwMCU7Zm9udDppbmhlcml0O3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lO21hcmdpbjowO3BhZGRpbmc6MH1hcnRpY2xlLGFzaWRlLGRldGFpbHMsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsbWVudSxuYXYsc2VjdGlvbntkaXNwbGF5OmJsb2NrfWJvZHl7bGluZS1oZWlnaHQ6MX1vbCx1bHtsaXN0LXN0eWxlOm5vbmV9YmxvY2txdW90ZSxxe3F1b3Rlczpub25lfWJsb2NrcXVvdGU6YmVmb3JlLGJsb2NrcXVvdGU6YWZ0ZXIscTpiZWZvcmUscTphZnRlcntjb250ZW50Om5vbmV9dGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjB9IiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuIyMgKysgTWVkaWEgUXVlcmllc1xyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyogXHJcbiAgICBVc2VkIGZvciBtZWRpYSBxdWVyaWVzLiBcclxuICAgIEFkZCB0aGVzZSBtaXhpbnMgaW4geW91ciBub3JtYWwgc2NzcyBmbG93LlxyXG4gICAgXHJcbiAgICBFZy5cclxuICAgIC5jb250YWluZXJ7XHJcbiAgICAgICAgd2lkdGg6MTAyNHB4O1xyXG4gICAgICAgIFxyXG4gICAgICAgIEBpbmNsdWRlIHRhYmxldHN7XHJcbiAgICAgICAgICAgIHdpZHRoOjkwJTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiovIFxyXG5cclxuQG1peGluIGxvd3Jlc21vbml0b3Jze1xyXG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEzNTBweCl7IEBjb250ZW50O31cclxufVxyXG5cclxuQG1peGluIHRhYmxldHN7XHJcbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTEwMHB4KXsgQGNvbnRlbnQ7IH1cclxufVxyXG5cclxuQG1peGluIHBob25lc3tcclxuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MjBweCl7IEBjb250ZW50OyB9XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiMjICsrIFVuaXQgdHJhbnNmb3JtXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKiAgXHJcbiAgICBVc2VkIGZvciBtYWtpbmcgY29udGFpbmVycyBoYXZlIHdpZHRoIGluIHBlcmNlbnRhZ2VzLiBcclxuICAgIFVzYWdlOiBkZWZpbmUgZWxlbW50IHdpZHRoIGluIHB4IGFuZCB0aGUgd2lkdGggb2YgcGFyZW50IGVsZW1udCBpbiBweC4gXHJcbiAgICBlZy4gLmJsb2Nre3dpZHRoOmNwKDUxMnB4LCAxMDI0cHgpfSB0aGlzIHdpbGwgcmVzdWx0IGluIC5ibG9ja3t3aWR0aDo1MCU7fSAgIFxyXG4qL1xyXG5cclxuQGZ1bmN0aW9uIGNwKCR0YXJnZXQsICRjb250YWluZXIpIHtcclxuICAgIEByZXR1cm4gKCR0YXJnZXQgLyAkY29udGFpbmVyKSAqIDEwMCU7XHJcbn1cclxuXHJcbi8qICBcclxuICAgIFVzZWQgZm9yIG1ha2luZyBweCB2YWx1ZXMgY29udmVydCB0byByZW0gdmFsdWVzXHJcbiAgICBVc2FnZTogZGVmaW5lIGZvbnQtc2l6ZSBpbiBweCBhbmQgaXQgd2lsbCBjb252ZXJ0IHRvIHJlbXNcclxuICAgIGVnLiBmb250LXNpemU6IHJlbSgxNHB4KTtcclxuKi9cclxuXHJcbkBmdW5jdGlvbiByZW0oJHRhcmdldCwgJGNvbnRleHQ6ICRiYXNlLWZvbnQtc2l6ZSkge1xyXG4gICBAaWYgJHRhcmdldCA9PSAwIHsgQHJldHVybiAwIH1cclxuICAgQHJldHVybiAkdGFyZ2V0IC8gJGNvbnRleHQgKyAwcmVtO1xyXG59XHJcbiRiYXNlLWZvbnQtc2l6ZToxNnB4OyIsIiIsIi8qISBUeXBlYmFzZS5sZXNzIHYwLjEuMCB8IE1JVCBMaWNlbnNlICovXHJcbi8qIFNldHVwICovXHJcbkBpbXBvcnQgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG86NDAwLDcwMCc7XHJcblxyXG5odG1sIHtcclxuICAvKiBDaGFuZ2UgZGVmYXVsdCB0eXBlZmFjZXMgaGVyZSAqL1xyXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuICBmb250LXNpemU6IDEwMCU7XHJcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XHJcbn1cclxuLyogQ29weSAmIExpc3RzICovXHJcbnAge1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XHJcbiAgbWFyZ2luLXRvcDogMXJlbTtcclxuICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG51bCxcclxub2wge1xyXG4gIG1hcmdpbi10b3A6IDEuNXJlbTtcclxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XHJcbn1cclxudWwgbGksXHJcbm9sIGxpIHtcclxuICBsaW5lLWhlaWdodDogMS41cmVtO1xyXG59XHJcbnVsIHVsLFxyXG5vbCB1bCxcclxudWwgb2wsXHJcbm9sIG9sIHtcclxuICBtYXJnaW4tdG9wOiAwO1xyXG4gIG1hcmdpbi1ib3R0b206IDA7XHJcbn1cclxuYmxvY2txdW90ZSB7XHJcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcclxuICBtYXJnaW4tdG9wOiAxLjVyZW07XHJcbiAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xyXG59XHJcbi8qIEhlYWRpbmdzICovXHJcbmgxLFxyXG5oMixcclxuaDMsXHJcbmg0LFxyXG5oNSxcclxuaDYge1xyXG4gIC8qIENoYW5nZSBoZWFkaW5nIHR5cGVmYWNlcyBoZXJlICovXHJcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbiAgbWFyZ2luLXRvcDogMWVtO1xyXG4gICAgcGFkZGluZy10b3A6IDFlbTtcclxuICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XHJcbiAgY29sb3I6ICMzMzM7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxufVxyXG5oMSB7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGxpbmUtaGVpZ2h0OiA0LjVyZW07XHJcbiAgbWFyZ2luLXRvcDogM3JlbTtcclxufVxyXG5oMiB7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGxpbmUtaGVpZ2h0OiAzcmVtO1xyXG4gIG1hcmdpbi10b3A6IDNyZW07XHJcbn1cclxuaDMge1xyXG4gIGZvbnQtc2l6ZTogMS40MTRyZW07XHJcbn1cclxuaDQge1xyXG4gIGZvbnQtc2l6ZTogMC43MDdyZW07XHJcbn1cclxuaDUge1xyXG4gIGZvbnQtc2l6ZTogMC40NzEzMzMzMzMzMzMzMzMzcmVtO1xyXG59XHJcbmg2IHtcclxuICBmb250LXNpemU6IDAuMzUzNXJlbTtcclxufVxyXG4vKiBUYWJsZXMgKi9cclxudGFibGUge1xyXG4gIG1hcmdpbi10b3A6IDEuNXJlbTtcclxuICBib3JkZXItc3BhY2luZzogMHB4O1xyXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbn1cclxudGFibGUgdGQsXHJcbnRhYmxlIHRoIHtcclxuICBwYWRkaW5nOiAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAzM3B4O1xyXG59XHJcbi8qIENvZGUgYmxvY2tzICovXHJcbmNvZGUge1xyXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XHJcbn1cclxuLyogTGVhZGluZyBwYXJhZ3JhcGggdGV4dCAqL1xyXG4ubGVhZCB7XHJcbiAgZm9udC1zaXplOiAxLjQxNHJlbTtcclxufVxyXG4vKiBIdWcgdGhlIGJsb2NrIGFib3ZlIHlvdSAqL1xyXG4uaHVnIHtcclxuICBtYXJnaW4tdG9wOiAwO1xyXG59XHJcblxyXG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4jIyArKyBHbG9iYWxzXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmh0bWwge1xyXG4gIGZvbnQtc2l6ZTogMTAwJTtcclxufVxyXG5cclxuYm9keSB7XHJcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XHJcbiAgLy9iYWNrZ3JvdW5kOiAjZmZmO1xyXG4gIGJhY2tncm91bmQ6IGNvcm5zaWxrO1xyXG4gIGNvbG9yOiAjNTY2Yjc4O1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuICBtYXgtd2lkdGg6IDQwZW07XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgbWFyZ2luLWxlZnQ6IDIlO1xyXG59XHJcblxyXG4qIHtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5hIHtcclxuICBjb2xvcjogI2U4MWM0ZjtcclxufVxyXG5cclxuLypcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnwgR2FsbGVyeVxyXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbi5nYWxsZXJ5IHtcclxuICBwYWRkaW5nOiAyMHB4IDE1cHg7XHJcbiAgYmFja2dyb3VuZDogI2VmZWZlZjtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICBsaSB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIG1hcmdpbjogNXB4O1xyXG4gIH1cclxuXHJcbiAgaW1nLCBhIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gIH1cclxufVxyXG5cclxuLypcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnwgRm9ybVxyXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmZvcm0ge1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7XHJcblxyXG59XHJcblxyXG5pbnB1dCwgdGV4dGFyZWEge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmc6IDE1cHg7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBjb2xvcjogIzQ0NDtcclxuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDdweDtcclxuICAtbW96LWJvcmRlci1yYWRpdXM6IDdweDtcclxuICBib3JkZXItcmFkaXVzOiA3cHg7XHJcbn1cclxuXHJcbmZvcm0gbGFiZWwge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbmZvcm0gdGV4dGFyZWEge1xyXG4gIGhlaWdodDogMjAwcHg7XHJcbn1cclxuXHJcbmZvcm0gYnV0dG9uIHtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYmFja2dyb3VuZDogI0U0MUM0RTtcclxuICBwYWRkaW5nOiAxNXB4IDQwcHggMTRweDtcclxuICBjb2xvcjogI2ZmZjtcclxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBmb250LXdlaWdodDogNzAwO1xyXG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogN3B4O1xyXG4gIC1tb3otYm9yZGVyLXJhZGl1czogN3B4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDdweDtcclxuICB0cmFuc2l0aW9uOiA3cztcclxufVxyXG5cclxuZm9ybSBidXR0b246aG92ZXIge1xyXG4gIGNvbG9yOiAjNTUwMDAwO1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHRvbWF0bztcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgdHJhbnNpdGlvbjogMS41cztcclxufVxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuIyMgKysgQ2xlYWZpeFxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyogZmxvYXQgY2xlYXJpbmcgZm9yIElFNiAqL1xyXG4qIGh0bWwgLmNsZWFyZml4IHtcclxuICBoZWlnaHQ6IDElO1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xyXG59XHJcblxyXG4vKiBmbG9hdCBjbGVhcmluZyBmb3IgSUU3ICovXHJcbiogKyBodG1sIC5jbGVhcmZpeCB7XHJcbiAgbWluLWhlaWdodDogMSU7XHJcbn1cclxuXHJcbi8qIGZsb2F0IGNsZWFyaW5nIGZvciBldmVyeW9uZSBlbHNlICovXHJcbi5jbGVhcmZpeDphZnRlciB7XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgY29udGVudDogXCIuXCI7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgaGVpZ2h0OiAwO1xyXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICBmb250LXNpemU6IDA7XHJcbn1cclxuXHJcbi5jbHIge1xyXG4gIGNsZWFyOiBib3RoO1xyXG59XHJcblxyXG4uY2xyIHtcclxuICBjb250ZW50OiBcInRlc3RcIjtcclxufVxyXG5cclxuLmZsYXNoIHtcclxuICBwYWRkaW5nOiAyMHB4O1xyXG4gIG1hcmdpbjogMTBweCAwO1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgZGlzcGxheTogbm9uZTtcclxuXHJcbiAgJi5hY3RpdmUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgfVxyXG5cclxuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDdweDtcclxuICAtbW96LWJvcmRlci1yYWRpdXM6IDdweDtcclxuICBib3JkZXItcmFkaXVzOiA3cHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAmLmVycm9yIHtcclxuICAgIGJhY2tncm91bmQ6IHJlZDtcclxuICB9XHJcblxyXG4gICYuc3VjY2VzcyB7XHJcbiAgICBiYWNrZ3JvdW5kOiBsaW1lZ3JlZW47XHJcbiAgfVxyXG59XHJcblxyXG4ucmVkIHtcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5zdHJvbmcge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcbiIsIi5tYWluLWhlYWRlciB7XHJcbiAgYmFja2dyb3VuZDogIzMzMztcclxuXHJcbiAgaDEge1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBmb250LXNpemU6IHJlbSgyMHB4KTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgfVxyXG59XHJcblxyXG4ubWFpbi1uYXYge1xyXG4gIGZsb2F0OiByaWdodDtcclxuXHJcbiAgbGkge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgfVxyXG5cclxuICBhIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHBhZGRpbmc6IDAgMTBweDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgJjpob3ZlciB7XHJcbiAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGkuYWN0aXZlIGEge1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XHJcbiAgfVxyXG59XHJcbiIsImgxLCBoMiB7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgLy9ib3JkZXI6IDFweCBzb2xpZCByZWQ7XHJcbn1cclxuXHJcbiNhY3Rvckxpc3Qge1xyXG4gIG1hcmdpbi10b3A6IDA7XHJcbn1cclxuIiwiIiwiLm1haW4tZm9vdGVye1xyXG4gICAgYmFja2dyb3VuZDogI2VmZWZlZjtcclxuICAgIHBhZGRpbmc6MjBweCAwO1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIFxyXG4gICAgaDN7XHJcbiAgICAgICAgbWFyZ2luOjA7XHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUdaLFdBQVc7QWtESFgsdURBQXVEO0FHRXZELE9BQU8sQ0FBUCxzREFBTztBSERQLEFBQUEsSUFBSSxFQUFDLElBQUksRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxVQUFVLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLFVBQVUsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxLQUFLLENBQUE7RUFBQyxNQUFNLEVBQUMsQ0FBQztFQUFDLFNBQVMsRUFBQyxJQUFJO0VBQUMsSUFBSSxFQUFDLE9BQU87RUFBQyxjQUFjLEVBQUMsUUFBUTtFQUFDLE1BQU0sRUFBQyxDQUFDO0VBQUMsT0FBTyxFQUFDLENBQUM7Q0FBRTs7QUFBRCxBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxPQUFPLENBQUE7RUFBQyxPQUFPLEVBQUMsS0FBSztDQUFFOztBQUFELEFBQUEsSUFBSSxDQUFBO0VBQUMsV0FBVyxFQUFDLENBQUM7Q0FBRTs7QUFBRCxBQUFBLEVBQUUsRUFBQyxFQUFFLENBQUE7RUFBQyxVQUFVLEVBQUMsSUFBSTtDQUFFOztBQUFELEFBQUEsVUFBVSxFQUFDLENBQUMsQ0FBQTtFQUFDLE1BQU0sRUFBQyxJQUFJO0NBQUU7O0FBQUQsQUFBQSxV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 */